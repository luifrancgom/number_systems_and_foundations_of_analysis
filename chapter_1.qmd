```{r}
#| label: libraries

library(kableExtra)
library(tidyverse)
```

# Basic Facts and Notions of Logic and Set Theory

This chapter introduces the concepts and terminology of logic and set theory.

What sets aside mathematics from other disciplines is its reliance on proof [@bilaniuk_problem_2009, p. ix]. But what is a proof? In an informal way a proof is any reasoned argument accepted as such by other mathematicians [@bilaniuk_problem_2009, p. ix].

In that sense mathematical logic is concerned with formalizing and analyzing the kinds of reasoning used in the rest of mathematics [@bilaniuk_problem_2009, p. ix].

## Propositional logic

Propositional logic attempts to make precise the relationships that certain connectives like *not*, *and*, *or*, and *if ... then* [@bilaniuk_problem_2009, p. x].

### Language

First we will define the formal language of propositional logic, $\mathcal{L}_P$, by specifying the symbols and formulas

::: {#def-symbols-lp}
## Symbols of $\mathcal{L}_P$

The symbols of $\mathcal{L}_P$ are:

-   Parentheses: $($ and $)$
-   Connectives: $\neg$ and $\Longrightarrow$
-   Atomic formulas: $A_0, A_1, A_2, \ldots, A_n, \ldots$
:::

Then we specify the ways in which the symbols of $\mathcal{L}_P$ can be put together.

::: {#def-formulas-lp}
## Formulas of $\mathcal{L}_P$

The formulas of $\mathcal{L}_P$ are those finite sequences or strings of the symbols given in @def-symbols-lp which satisfy the following rules:

-   Every atomic formula is a formula
-   If $\alpha$ is a formula, then $(\neg \alpha)$ is a formula
-   If $\alpha$ and $\beta$ are formulas, then $(\alpha \Longrightarrow \beta)$ is a formula
-   No other sequence of symbols is a formula
:::

In @def-symbols-lp and @def-formulas-lp parentheses are just punctuation where their purpose is to group other symbols together, $\neg$ and $\Longrightarrow$ represent the connectives *not* and *if ... then* and the atomic formulas represent statements that cannot be broken down any further using our connectives. Finally we specify that a well formed formula can only be obtained by the first 3 rules pointed out in @def-formulas-lp[^chapter_1-1].

[^chapter_1-1]: See [@church_introduction_1996, p. 70] for more details.

::: {#exr-parentheses}
Show that every formula of $\mathcal{L}_P$ has the same number of left parentheses as it has of right parentheses.
:::

::: {#sol-parentheses}
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no parentheses is has the same left as right parentheses.

*Induction hypothesis* $(n \leq k)$: Assume a formula with $n \leq k$ connectives has the same left as right parentheses.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* $\alpha$ has the same left as right parentheses so $(\neg \alpha)$ also have the same left as right parentheses.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* $\beta$ and $\gamma$ have the same left as right parentheses so $(\beta \Longrightarrow \gamma)$ also has the same left as right parentheses.
:::

::: {#exr-length-parentheses}
Suppose $\alpha$ is any formula of $\mathcal{L}_P$. Let $l(\alpha)$ be the length of $\alpha$ as a sequence of symbols and let $p(\alpha)$ be the number of parentheses (counting both left and right parentheses) in $\alpha$. What are the minimum and maximum values of $\frac{p(\alpha)}{l(\alpha)}$?
:::

::: {#sol-length-parentheses}
The minimum value of $p(\alpha)$ is $0$ when $\alpha$ is an atomic formula. Therefore the minimum value of $\frac{p(\alpha)}{l(\alpha)}$ is $0$ because $p(\alpha) \geq 0$ and $l(\alpha) \geq 1$.

In the case of other values lets inspect the possible values of $p(\alpha)$ and $l(\alpha)$:

-   For $p(\alpha)$ the possible values are $0, 2, 4, \ldots, 2m, \ldots$.

-   For $l(\alpha)$ we can begin with an atomic formula, $A_0$, and then add $3$ or $4$ symbols to create a well formed formula:

    -   $(\neg A_0)$
    -   $(A_0 \Longrightarrow A_1)$

Where the possible values of $l(\alpha)$ are $1, 4, 5, 7, 8, \ldots, s - 1, s, s + 1, \ldots$ as it is shown in @fig-length-formula-lp where the majority of duplicate branches with the same lengths are omitted but can be different in relation to $p(\alpha)$.

![Possible values of $l(\alpha)$ and associated $p(\alpha)$ values in parentheses](images/fig-length-formula-lp-1.png){#fig-length-formula-lp fig-align="center" width=70%}

Therefore we can examine the leftmost branch.

-   For the lefmost branch we have for $\frac{p(\alpha)}{l(\alpha)} = \frac{0}{1}, \frac{2}{4}, \frac{4}{7}, \frac{6}{10}, \frac{8}{13}, \ldots, \frac{2n}{3n + 1}, \ldots$. Therefore $\lim_{n \to \infty} \frac{2n}{3n + 1} = \lim_{n \to \infty} \frac{2}{3} = \frac{2}{3}$.

Therefore $0 \leq \frac{p(\alpha)}{l(\alpha)}$ and $\frac{p(\alpha)}{l(\alpha)} < \frac{2}{3}$ for the lefmost branch

:::

::: {#exr-atomic-implies}

Suppose $\alpha$ is any formula of $\mathcal{L}_P$. Let $s(\alpha)$ be the number of atomic formulas in $\alpha$ (counting repetitions) and let $c(\alpha)$ be the number of occurrences of $\Longrightarrow$ in $\alpha$. Show that $s(\alpha) = c(\alpha) + 1$.

:::

::: {#sol-atomic-implies}
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no $\Longrightarrow$ then $c(\varphi) = 0$ and $s(\varphi) = 1$ and so $s(\varphi) = c(\varphi) + 1$.

*Induction hypothesis* $(n \leq k)$: Assume that for a formula with $n \leq k$ connectives $s(\varphi) = c(\varphi) + 1$.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* for $\alpha$ we have that $s(\alpha) = c(\alpha) + 1$. Therefore for $(\neg \alpha)$ we have also that $s((\neg \alpha)) = c((\neg \alpha)) + 1$.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* for $\beta$ and $\gamma$ we have that $s(\beta) = c(\beta) + 1$ and $s(\gamma) = c(\gamma) + 1$. Therefore $s((\beta \Longrightarrow \gamma)) = c(\beta) + c(\gamma) + 1 + 1$. But $c(\beta) + c(\gamma) + 1 = c((\beta \Longrightarrow \gamma))$ so $s((\beta \Longrightarrow \gamma)) = c((\beta \Longrightarrow \gamma)) + 1$\
:::

::: {#exr-length-formulas-lp}
What are the possible lengths of formulas of $\mathcal{L}_P$? Prove it.
:::

::: {#sol-length-formulas-lp}
Using @sol-length-parentheses and @fig-length-formula-lp the possible possible lengths of formulas of $\mathcal{L}_P$ are $1, 4, 5, 7, 8, \ldots, s - 1, s, s + 1, \ldots$.
:::

::: {#exr-without-punctuation-lp}
Find a way for doing without parentheses or other punctuation symbols in defining a formal language for $\mathcal{L}_P$.
:::

::: {#sol-without-punctuation-lp}
See [@lukasiewicz_selected_1970, p. 180] which is called Lukasiewicz or Polish notation

In Polish notation, logical operators are placed before their operands. This prefix positioning eliminates the need for parentheses, as the order of operations is strictly determined by the operator sequence.

So using @def-formulas-lp we have that:

-   Every atomic formula is a formula
-   If $\alpha$ is a formula, then $\neg \alpha$ is a formula
-   If $\alpha$ and $\beta$ are formulas, then $\Longrightarrow \alpha \beta$ is a formula
-   No other sequence of symbols is a formula

For example $(((\neg \alpha) \Longrightarrow \beta) \Longrightarrow (\neg \gamma))$ can be written using Polish and modern notation as $\Longrightarrow \Longrightarrow \neg \alpha \beta \neg \gamma$

Also Polish notation is not ambiguous. For example:

-   $((\alpha \Longrightarrow \beta) \Longrightarrow \gamma)$ is written as $\Longrightarrow \Longrightarrow \alpha \beta \gamma$

-   $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ is written as $\Longrightarrow \alpha \Longrightarrow \beta \gamma$
:::

::: {#exr-formulas-countable-lp}
Show that the set of formulas of $\mathcal{L}_P$ is countable.
:::

::: {#sol-formulas-countable-lp}

**Pending**

Let $S_{\mathcal{L}_p}$ the set of symbols of $\mathcal{L}_p$, $S_{\mathcal{L}_p} = \{ (, ), \neg, \Longrightarrow \} \cup \{ A_0, A_1, A_2, \ldots, A_n, \ldots \}$.

-  Show that $S_{\mathcal{L}_p}$ is a denumerable set.

Let $S_{\mathcal{L}_p}(l(n)) = \underset{n \text{ times}}{\underbrace{S_{\mathcal{L}_p} \times \ldots \times S_{\mathcal{L}_p}}} = S_{\mathcal{L}_p}^n$ the string of symbols of length $n$ build from $S_{\mathcal{L}_p}$.

-  Prove that $S_{\mathcal{L}_p}^2, S_{\mathcal{L}_p}^3, \ldots, S_{\mathcal{L}_p}^n$ are denumerable sets.

-  Prove that $S_{\mathcal{L}_p}^1 \cup S_{\mathcal{L}_p}^2 \cup \ldots \cup S_{\mathcal{L}_p}^n \cup \dots = \bigcup_{i \in \mathbb{N}} S_{\mathcal{L}_p}^i$ is a denumerable set. That is, any denumerable union of denumerable sets is a countable set.

-  Let $F_{\mathcal{L}_p}$ the set of formulas of $\mathcal{L}_p$. Because $F_{\mathcal{L}_p} \subseteq \bigcup_{i \in \mathbb{N}} S_{\mathcal{L}_p}^i$ then $F_{\mathcal{L}_p}$ is countable.

:::

#### Informal conventions {#sec-informal-conventions}

We will use the symbols $\land$, $\lor$, and $\iff$ to represent *and*, *or* and *if and only if* respectively. Since they are not among the symbols of $\mathcal{L}_P$, we will use them as abbreviations for certain constructions involving only $\neg$ and $\Longrightarrow$. Namely:

-   $(\alpha \land \beta)$ is short for $(\neg(\alpha \Longrightarrow (\neg \beta)))$

-   $(\alpha \lor \beta)$ is short for $(( \neg \alpha) \Longrightarrow \beta)$

-   $(\alpha \iff \beta)$ is short for $((\alpha \Longrightarrow \beta) \land (\beta \Longrightarrow \alpha))$

::: {#def-subformulas-lp}
## Subformulas

Suppose $\varphi$ is a formula of $\mathcal{L}_p$. The set of subformulas of $\varphi$, $S(\varphi)$, is defined as follows:

-   If $\varphi$ is an atomic formula then $S(\varphi) = \{ \varphi \}$

-   If $\varphi$ is $(\neg \alpha)$ then $S(\varphi) = S(\alpha) \cup \{ (\neg \alpha) \}$

-   If $\varphi$ is $(\alpha \Longrightarrow \beta)$ then $S(\varphi) = S(\alpha) \cup S(\beta) \cup \{ (\alpha \Longrightarrow \beta) \}$
:::

::: {#exr-find-subformulas-lp}
Find all the subformulas of each of the following formulas.

-   $(\neg((\neg A_{56}) \Longrightarrow A_{56}))$
-   $(A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))))$
-   $(((\neg A_0) \land (\neg A_1)) \iff (\neg (A_0 \lor A_1)))$
:::

::: {#sol-find-subformulas-lp}
$$\begin{split}
   S((\neg((\neg A_{56}) \Longrightarrow A_{56}))) & = S(((\neg A_{56}) \Longrightarrow A_{56})) \cup \{ (\neg((\neg A_{56}) \Longrightarrow A_{56})) \} \\
    & = \{ A_{56}, (\neg A_{56}), ((\neg A_{56}) \Longrightarrow A_{56}), \\
    & \;\;\;\;\;\; (\neg((\neg A_{56}) \Longrightarrow A_{56})) \}
     \end{split}$$

$$\begin{split}
   S((A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))))) & = S(A_9) \cup S((A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \\ 
    & \;\;\;\; \cup \{ (A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \} \\
    & = \{ A_9, A_8, A_{78}, A_0, (\neg A_0), \\ 
    & \;\;\;\;\;\; (\neg(\neg A_0)), (A_{78} \Longrightarrow (\neg (\neg A_0))), \\
    & \;\;\;\;\;\; (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))), \\
    & \;\;\;\;\;\; (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))), \\
    & \;\;\;\;\;\; (A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \}
     \end{split}$$

Let $\varphi = (((\neg A_0) \land (\neg A_1)) \Longrightarrow (\neg (A_0 \lor A_1)))$ and $\sigma = ((\neg (A_0 \lor A_1)) \Longrightarrow ((\neg A_0) \land (\neg A_1)))$

$$\begin{split}
   S((((\neg A_0) \land (\neg A_1)) \iff (\neg (A_0 \lor A_1)))) & = S((\varphi \Longrightarrow (\neg \sigma))) \cup \{ (\neg (\varphi \Longrightarrow (\neg \sigma)))\} \\
   & = \{ A_0, A_1, (\neg A_0), (\neg A_1), (\neg (\neg A_1) ), \\
   & \;\;\;\;\;\; (A_0 \lor A_1), ((\neg A_0) \Longrightarrow (\neg (\neg A_1))), \\
   & \;\;\;\;\;\; (\neg (A_0 \lor A_1)), ((\neg A_0) \land (\neg A_1)) \\
   & \;\;\;\;\;\; \sigma, (\neg \sigma), \varphi, \\
   & \;\;\;\;\;\; (\varphi \Longrightarrow (\neg \sigma)), \\
   & \;\;\;\;\;\; (\neg(\varphi \Longrightarrow (\neg \sigma))) \}
     \end{split}$$
:::

#### Unique Readability

To ensure that the formulas of $\mathcal{L}_p$ are unambiguous (can be read in only one way according to the rules given in @def-formulas-lp) one must add to @def-symbols-lp the requirement that all the symbols of $\mathcal{L}_p$ are distinct and that no symbol is a subsequence of any other symbol.

::: {#thm-unique-readability}
## Unique Readability

A formula of $\mathcal{L}_p$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.
:::

::: proof
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no connectives it can not of the form $(\neg \varphi)$ or $(\alpha \Longrightarrow \beta)$.

*Induction hypothesis* $(n \leq k)$: Assume a formula with $n \leq k$ connectives must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* $\alpha$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

        -   Because $\alpha$ satisfy exactly one of the first 3 conditions in @def-formulas-lp then $(\neg \alpha)$ can't be an atomic formula because an atomic formula doesn't have connectives.

        -   Now assume that $(\neg \alpha)$ can be expressed as $(\beta \Longrightarrow \gamma)$. Then $\neg \alpha$ will be equal to $\beta \Longrightarrow \gamma$. However $\alpha$ satisfy exactly one of the first 3 conditions in @def-formulas-lp so it will be impossible that $\neg \alpha$ and $\beta \Longrightarrow \gamma$ are equal.

            -   Therefore $(\neg \alpha)$ satisfy exactly the 2 condition in @def-formulas-lp.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* $\beta$ and $\gamma$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

        -   Because $\beta$ and $\gamma$ satisfy exactly one of the first 3 conditions in @def-formulas-lp then $(\beta \Longrightarrow \gamma)$ can't be an atomic formula because an atomic formula doesn't have connectives.

        -   Now assume that $(\beta \Longrightarrow \gamma)$ can be expressed as $(\neg \sigma)$. Then $\neg \sigma$ will be equal to $\beta \Longrightarrow \gamma$. However $\beta$ and $\gamma$ satisfy exactly one of the first 3 conditions in @def-formulas-lp so it will be impossible that $\neg \sigma$ and $\beta \Longrightarrow \gamma$ are equal.

            -   Therefore $(\beta \Longrightarrow \gamma)$ satisfy exactly the 3 condition in @def-formulas-lp.
:::

### Truth Assignments

Whether a given formula $\varphi$ of $\mathcal{L}_p$ is true or false usually depends on how we interpret the atomic formulas which appear in $\varphi$ [@bilaniuk_problem_2009, p. 7].

::: {#def-truth-assignment}
## Truth assignment

A truth assignment is a function $v$ whose domain is the set of all formulas of $\mathcal{L}_p$ and whose range is the set $\{ T, F \}$ of truth values, such that:

-   $v(A_n)$ is defined for every atomic formula $A_n$.

-   For any formula $\alpha$:

$$v((\neg \alpha)) = \begin{cases}
                     T & \text{ if } v(\alpha) = F \\
                     F & \text{ if } v(\alpha) = T 
                     \end{cases}$$

-   For any formulas $\alpha$ and $\beta$:

$$v((\alpha \Longrightarrow \beta)) = \begin{cases}
                     F & \text{ if } v(\alpha) = T \text{ and } v(\beta) = F \\
                     T & \text{ otherwise }
                     \end{cases}$$
:::

For example, let $v(A_0) = T$ and $v(A_1) = F$ then it is possible to determine $v(((\neg A_1) \Longrightarrow (A_0 \Longrightarrow A_1)))$ in the following way:

-   $v((\neg A_1)) = T$
-   $v((A_0 \Longrightarrow A_1)) = F$
-   $v(((\neg A_1) \Longrightarrow (A_0 \Longrightarrow A_1))) = F$

A convenient way to write out the determination of the truth value of a formula on a given truth assignment is to use a *truth table*:

```{r}
#| results: asis
#| label: tbl-true-table-example
#| tbl-cap: True table example

# See https://stackoverflow.com/questions/76025169/latex-equations-in-tables-with-quarto-revealjs to create a table

true_table_example <- tibble(
 `$A_0$` = c("$T$"), 
 `$A_1$` = c("$F$"),
 `$(\\neg A_1)$` = c("$T$"),
 `$(A_0 \\Longrightarrow A_1)$` = c("$F$"),
 `$((\\neg A_1) \\Longrightarrow (A_0 \\Longrightarrow A_1))$` = c("$T$")
)

kbl(true_table_example, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

Using what is described in @sec-informal-conventions we have the following:

$$v((\alpha \land \beta)) = \begin{cases}
                     T & \text{ if } v(\alpha) = T \text{ and } v(\beta) = T \\
                     F & \text{ otherwise }
                     \end{cases}$$

$$v((\alpha \lor \beta)) = \begin{cases}
                     F & \text{ if } v(\alpha) = F \text{ and } v(\beta) = F \\
                     T & \text{ otherwise }
                     \end{cases}$$

$$v((\alpha \iff \beta)) = \begin{cases}
                     T & \text{ if } v(\alpha) = v(\beta) \\
                     F & \text{ otherwise }
                     \end{cases}$$

Also it is important to point out that in @def-truth-assignment $v((\alpha \Longrightarrow \beta))$ is known as *material implication* [@egre_logic_2021]. In a 2-valued propositional framework there are 16 possible truth tables for 2 formulas $\alpha$ and $\beta$ as it is shown in @tbl-true-1-4, @tbl-true-5-8, @tbl-true-9-12 and @tbl-true-13-16

```{r}
#| results: asis
#| label: tbl-true-1-4
#| tbl-cap: Truth tables contradiction, tautology, $\alpha$ and $\beta$

true_table_1_4 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\bot$` = c("$F$", "$F$", "$F$", "$F$"),
 `$\\top$` = c("$T$", "$T$", "$T$", "$T$"),
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"),
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 .name_repair = "minimal"
)

kbl(true_table_1_4, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-5-8
#| tbl-cap: Truth tables $\neg \alpha$, $\neg \beta$, NOR and NAND

true_table_5_8 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\neg \\alpha$` = c("$F$", "$F$", "$T$", "$T$"),
 `$\\neg \\beta$` = c("$F$", "$T$", "$F$", "$T$"),
 `$\\Downarrow$` = c("$F$", "$F$", "$F$", "$T$"),
 `$\\Uparrow$` = c("$F$", "$T$", "$T$", "$T$")
)

kbl(true_table_5_8, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-9-12
#| tbl-cap: Truth tables AND, OR, material implication (IMPLY) and biconditional (XNOR)

true_table_9_12 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\land$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\lor$` = c("$T$", "$T$", "$T$", "$F$"),
 `$\\Longrightarrow$` = c("$T$", "$F$", "$T$", "$T$"),
 `$\\iff$` = c("$T$", "$F$", "$F$", "$T$")
)

kbl(true_table_9_12, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-13-16
#| tbl-cap: Truth tables converse implication, material nonimplication (NIMPLY), converse material nonimplication and XOR

true_table_13_16 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\Longleftarrow$` = c("$T$", "$T$", "$F$", "$T$"),
 `$\\not\\Longrightarrow$` = c("$F$", "$T$", "$F$", "$F$"),
 `$\\not\\Longleftarrow$` = c("$F$", "$F$", "$T$", "$F$"),
 `$\\oplus$` = c("$F$", "$T$", "$T$", "$F$")
)

kbl(true_table_13_16, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

Assuming that we want:

-   $v(\alpha) = T$, $v(\beta) = T$ and $v((\alpha \Longrightarrow \beta)) = T$

-   $v(\alpha) = T$, $v(\beta) = F$ and $v((\alpha \Longrightarrow \beta)) = F$

From the 16 possible truth tables only 4 comply with these both conditions:

```{r}
#| results: asis
#| label: tbl-true-scenarios
#| tbl-cap: Possible truth tables for $\Longrightarrow$ in a 2-valued propositional framework  

true_table_scenarios <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\land$` = c("$T$", "$F$", "$F$", "$F$"),
 `$\\iff$` = c("$T$", "$F$", "$F$", "$T$"),
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\Longrightarrow$` = c("$T$", "$F$", "$T$", "$T$"),
 .name_repair = "minimal"
)

kbl(true_table_scenarios, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

In @tbl-true-scenarios the first truth table corresponds to $\land$, the second corresponds to $\iff$ and the third corresponds to $\beta$ where these tables are not suitable for $\Longrightarrow$. Therefore the last table is the only truth table suitable for $\Longrightarrow$ assuming we want the both conditions pointed above in a 2-valued propositional framework.

::: {#prp-truth-values-atomic-formulas}
## Truth values of atomic formulas

Suppose $\delta$ is any formula and $u$ and $v$ are truth assignments such that $u(A_n) = v(A_n)$ for all atomic formulas $A_n$ which occur in $\delta$. Then $u(\delta) = v(\delta)$.
:::

::: proof
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\delta$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\delta$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. So $\delta = A_i$ for some $i \in \mathbb{N}$ where $u(A_i) = v(A_i)$. Therefore $u(\delta) = v(\delta)$.

*Induction hypothesis* $(n \leq k)$: Assume that for a formula $\delta$ with $n \leq k$ connectives we have that for $u$ and $v$ truth assignments such that $u(A_n) = v(A_n)$ for all atomic formulates $A_n$ which occur in the $\delta$ we have that $u(\delta) = v(\delta)$

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \delta)$ for some formula $\delta$ with $k$ connectives.

    -   Therefore $v(\delta) = u(\delta)$ and by @def-truth-assignment $v(\neg \delta) = u( \neg \delta)$ which means that $v(\varphi) = u(\varphi)$.

-   $(\delta \Longrightarrow \beta)$ for some formulas $\delta$ and $\beta$ with $k$ connectives.

    -   Therefore $v(\delta) = u(\delta)$ and $v(\beta) = u(\beta)$ and by @def-truth-assignment $v(\delta \Longrightarrow \delta) = u(\delta \Longrightarrow \delta)$ which means that $v(\varphi) = u(\varphi)$.
:::

::: {#cor-truth-values-atomic-formulas}
## Truth values of atomic formulas

Suppose $u$ and $v$ are truth assignments such that $u(A_n) = v(A_n)$ for every atomic formula $A_n$. Then $u = v$, i.e. $u(\varphi) = v(\varphi)$ for every formula $\varphi$.
:::

::: proof
Because $u(A_n) = v(A_n)$ for every atomic formula $A_n$ in $\mathcal{L}_p$ we can take any formula $\varphi$ and apply @prp-truth-values-atomic-formulas. Thefefore $v(\varphi) = u(\varphi)$ but $\varphi$ is any formula in $\mathcal{L}_p$ so it applies to every formula.
:::

::: {#def-formula-satisfiable}
If $v$ is a truth assignment and $\varphi$ is a formula, we will often say that $v$ *satisfies* $\varphi$ if $v(\varphi) = T$.

Similarly, if $\Sigma$ is a set of formulas, we will often say that $v$ *satisfies* $\Sigma$ if $v(\sigma) = T$ for every $\sigma \in \Sigma$.

We will say that $\varphi$ (respectively, $\Sigma$) is *satisfiable* if there is some truth assignment which satisfies it.
:::

::: {#def-tautology-contradiction}
A formula $\varphi$ is a *tautology* if it is satisfied by every truth assignment.

A formula $\psi$ is a *contradiction* if there is no truth assignment which satisfies it.
:::

For example, $(A_4 \Longrightarrow A_4)$ is a tautology, $(\neg (A_4 \Longrightarrow A_4))$ is a contradiction and $A_4$ neither of them.

```{r}
#| results: asis
#| label: tbl-example-tautology-contradiction
#| tbl-cap: Example of a tautology and a contradiction

tautology_contradiction <- tibble(
 `$A_4$` = c("$T$", "$F$"), 
 `$(A_4 \\Longrightarrow A_4)$` = c("$T$", "$T$"),
 `$(\\neg (A_4 \\Longrightarrow A_4))$` = c("$F$", "$F$")
)

kbl(tautology_contradiction, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:3, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

::: {#prp-tautology-contradiction-example}
If $\alpha$ is any formula, then $((\neg \alpha) \lor \alpha)$ is a tautology and $((\neg \alpha) \land \alpha)$ is a contradiction.
:::

::: proof
```{r}
#| results: asis

tautology_contradiction_proof <- tibble(
 `$\\alpha$` = c("$T$", "$F$"), 
 `$(\\neg \\alpha)$` = c("$F$", "$T$"),
 `$((\\neg \\alpha) \\lor \\alpha)$` = c("$T$", "$T$"),
 `$((\\neg \\alpha) \\land \\alpha)$` = c("$F$", "$F$")
)

kbl(tautology_contradiction_proof, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```
:::

::: {#prp-relation-tautology-contradiction}
A formula $\beta$ is a tautology if and only if $\neg \beta$ is a contradiction.
:::

::: proof
For all $v$, where $v$ is a true assignment, $v(\beta) = T$. By @def-truth-assignment $v((\neg \beta)) = F$ so $(\neg \beta)$ is a contradiction.

For all $v$, where $v$ is a true assignment, $v((\neg \beta)) = F$. By @def-truth-assignment $v(\beta) = T$ so $\beta$ is a tautology.
:::

::: {#def-formula-or-formulas-implies-a-formula}
A set of formulas $\Sigma$ implies a formula $\varphi$, written as $\Sigma \models \varphi$, if every truth assignment $v$ which satisfies $\Sigma$ also satisfies $\varphi$.

We will often write $\Sigma \not \models \varphi$ if it is not the case that $\Sigma \models \varphi$.

In the case where $\Sigma$ is empty, we will usually write $\models \varphi$ instead of $\emptyset \models \varphi$.

Similarly, if $\Delta$ and $\Gamma$ are sets of formulas, then $\Delta$ implies $\Gamma$, written as $\Delta \models \Gamma$, if every truth assignment $v$ which satisfies $\Delta$ also satisfies $\Gamma$.
:::

For example, $\{ A_3, (A_3 \Longrightarrow (\neg A_7)) \} \models (\neg A_7)$ because if $v$ is a true assignment such that $v(A_3) = T$ and $v((A_3 \Longrightarrow (\neg A_7))) = T$ then it must be the case that $v((\neg A_7)) = T$ by @def-truth-assignment.

Also, $\{ A_8, (A_5 \Longrightarrow A_8) \} \not \models A_5$, because if $u$ is a true assignment such that $u(A_8) = T$ and $u((A_5 \Longrightarrow A_8)) = T$. However, it is possible to have $u(A_5) = F$.

::: {#nte-truth-assignments-tautology-contradiction .callout-note}

A formula $\varphi$ is a tautology if and only if $\models \varphi$ and a contradiction if and only if $\models (\neg \varphi)$.

Lets brake each element to understand why this is true:

-   If $v$ is a truth assignment then:

    -   $v$ satisfies $\sigma \iff v(\sigma) = T$

-   If $\Sigma$ is a set of formulas then:

    -   $v$ satisfies $\Sigma \iff (\forall \sigma)(\sigma \in \Sigma \Longrightarrow v(\sigma)=T)$

-   $\Sigma \models \varphi$ if and only if every truth assignment $v$ which satisfies $\Sigma$ also satisfies $\varphi$

    -   $\Sigma \models \varphi \iff ((\forall v)((\forall \sigma)(\sigma \in \Sigma \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$

-   Now let's apply to $\models \varphi$ when $\varphi$ is a tautology:

    -   $\models \varphi \iff ((\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$

        -   $\sigma \in \emptyset$ is false so $(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)$ is true by @def-truth-assignment.

        -   $(\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T))$ will be true and $v(\sigma)=T$ is true because $\sigma$ is a tautology

        -   By @def-truth-assignment $((\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$ is true so we can write $\models \varphi$.
:::

::: {#prp-subset-formulas-implies}
If $\Gamma$ and $\Sigma$ are sets of formulas such that $\Gamma \subseteq \Sigma$, then $\Sigma \models \Gamma$.
:::

::: proof
If $v$ satisfies $\Sigma$ then for all $\sigma \in \Sigma$ we have that $v(\sigma) = T$. But if $\gamma \in \Gamma$ then also $\gamma \in \Sigma$. Therefore $v(\gamma) = T$ for any formula that belongs to $\Gamma$. This means that $\Sigma \models \Gamma$.
:::

::: {#exr-check-a-formulas-implies-a-formula}
How can one check whether or not $\Sigma \models \varphi$ for a formula $\varphi$ and a finite set of formulas $\Sigma$?
:::

::: {#sol-check-a-formulas-implies-a-formula}
We can construct a truth table and evaluate if in each row where the formulas that belongs to $\Sigma$ are true $\varphi$ is also true.

For example, let $\Sigma = \{ (\alpha \Longrightarrow \beta), (\neg \beta) \}$ and $\varphi = (\neg \alpha)$. The truth table will be:

```{r}
#| results: asis

exercise_1_8 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(\\alpha \\Longrightarrow \\beta)$` = c("$T$", "$F$", "$T$", "$T$"),
 `$(\\neg \\beta)$` = c("$F$", "$T$", "$F$", "$T$"),
 `$(\\neg \\alpha)$` = c("$F$", "$F$", "$T$", "$T$")
)

kbl(exercise_1_8, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

The last row of the truth table represents a truth assignment $v$ that satisfies $\Sigma$ and also the same truth asignment $v$ satisfies $\varphi$. Therefore we can check that $\Sigma \models \varphi$.

It is importa to mention that $\Sigma$ must be a finite set of formulas or it will not be possible to check each row in the truth table that is build.
:::

::: {#prp-truth-tables-deduction-theorem}
Suppose $\Sigma$ is a set of formulas and $\psi$ and $\rho$ are formulas. Then $\Sigma \cup \{ \psi \} \models \rho$ if and only if $\Sigma \models (\psi \Longrightarrow \rho)$.
:::

::: proof
-   Assume $\Sigma \models (\psi \Longrightarrow \rho)$ and let $v$ satisfies $\Sigma \cup \{ \psi \}$.

    -   By @prp-subset-formulas-implies $v$ satisfies also $\Sigma$ because $\Sigma \subseteq \Sigma \cup \{ \psi \}$.

    -   By assumption $v$ satisfies $(\psi \Longrightarrow \rho)$ because $\Sigma \models (\psi \Longrightarrow \rho)$. Therefore $v((\psi \Longrightarrow \rho)) = T$

    -   Because $v(\psi) = T$ and $v((\psi \Longrightarrow \rho)) = T$ by @def-truth-assignment it must be the case that $v(\rho) = T$. Therefore $\Sigma \cup \{ \psi \} \models \rho$.

-   Assume $\Sigma \cup \{ \psi \} \models \rho$.

    -   Let $v$ satisfies $\Sigma \cup \{ \psi \}$ so $v(\sigma) = F$ for all $\sigma in \Sigma$, $v(\psi) = T$ and $v(\rho) = T$.

    -   Because $v(\psi) = T$ and $v(\rho) = T$ by @def-truth-assignment $v((\psi \Longrightarrow \rho)) = T$.

    -   Therefore $\Sigma \models (\psi \Longrightarrow \rho)$.
:::

::: {#prp-set-formulas-satisfiable}
A set of formulas $\Sigma$ is satisfiable if and only if there is no contradiction $\chi$ such that $\Sigma \models \chi$.
:::

::: proof
-   Assume $\Sigma = \emptyset$ by @nte-truth-assignments-tautology-contradiction $\emptyset$ is satisfiable and $\chi$ will be a tautology because $\models \chi$.

-   Assume $\Sigma \neq \emptyset$ is a set of formulas that are satisfiable.

    -   Lets take $\sigma \in \Sigma$ so $v(T) = \sigma$. Then $\Sigma \models \sigma$ where $\sigma$ is not a contradiction.

-   Assume $\Sigma \models \chi$ where $\chi$ is not a contradiction.

    -   Then for all $\sigma \in \Sigma$ we have that $v(\sigma) = T$. Therefore $\Sigma$ is satisfiable.
:::

### Deductions

::: {#def-axioms-lp}
The 3 axiom schema of $\mathcal{L}_P$ are[^chapter_1-2]:

1.  $(\alpha \Longrightarrow (\beta \Longrightarrow \alpha))$

2.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$

3.  $(((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta))$

Replacing $\alpha$, $\beta$, and $\gamma$ by particular formulas of $\mathcal{L}_P$ in any one of the axiom schemas gives an axiom of $\mathcal{L}_P$.
:::

[^chapter_1-2]: This axioms are part of Hilbert proof systems. See [@wasilewska_logics_2018, chap. 5] for more details and where these axioms where taken from [@mendelson_introduction_2015, p. 28]. For an alternative check out [Metamath Proof Explorer - The Axioms](https://us.metamath.org/mpeuni/mmset.html#axioms)

::: {#prp-axioms-lp-tautology}
Every axiom of $\mathcal{L}_P$ is a tautology.
:::

::: proof
```{r}
#| results: asis
#| label: tbl-axiom-1-lp
#| tbl-cap: Truth table axiom 1 $\mathcal{L}_p$

axiom_1_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(\\beta \\Longrightarrow \\alpha)$` = c("$T$", "$T$", "$F$", "$T$"),
 `$\\alpha \\Longrightarrow ((\\beta \\Longrightarrow \\alpha))$` = c("$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_1_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-axiom-2-lp
#| tbl-cap: Truth table axiom 2 $\mathcal{L}_p$

axiom_2_a_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$T$", "$T$", "$F$", "$F$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$T$", "$F$", "$F$", "$T$", "$T$", "$F$", "$F$"),
 `$\\gamma$` = c("$T$", "$F$", "$T$", "$F$", "$T$", "$F$", "$T$", "$F$"),
 `$(\\alpha \\Longrightarrow (\\beta \\Longrightarrow \\gamma))$` = c("$T$", "$F$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$"),
 `$((\\alpha \\Longrightarrow \\beta) \\Longrightarrow (\\alpha \\Longrightarrow \\gamma))$` = c("$T$", "$F$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_2_a_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
 
axiom_2_b_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$T$", "$T$", "$F$", "$F$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$T$", "$F$", "$F$", "$T$", "$T$", "$F$", "$F$"),
 `$\\gamma$` = c("$T$", "$F$", "$T$", "$F$", "$T$", "$F$", "$T$", "$F$"),
 `$((\\alpha \\Longrightarrow (\\beta \\Longrightarrow \\gamma))) \\Longrightarrow \\\\ ((\\alpha \\Longrightarrow \\beta) \\Longrightarrow (\\alpha \\Longrightarrow \\gamma))$` = c("$T$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_2_b_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-axiom-3-lp
#| tbl-cap: Truth table axiom 3 $\mathcal{L}_p$

axiom_3_a_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$((\\neg \\beta) \\Longrightarrow (\\neg \\alpha))$` = c("$T$", "$F$", "$T$", "$T$"),
 `$(((\\neg \\beta) \\Longrightarrow \\alpha) \\Longrightarrow \\beta)$` = c("$T$", "$F$", "$T$", "$T$")
)

kbl(axiom_3_a_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
 
axiom_3_b_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(((\\neg \\beta) \\Longrightarrow (\\neg \\alpha)) \\Longrightarrow (((\\neg \\beta) \\Longrightarrow \\alpha) \\Longrightarrow \\beta))$` = c("$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_3_b_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:3, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```
:::

::: {#def-modus-ponens}
## Modus ponens (rule of inference)

Given the formulas $\varphi$ and $(\varphi \Longrightarrow \psi)$, one may infer $\psi$.
:::

::: {#prp-modus-ponens-implies}
Suppose $\varphi$ and $\psi$ are formulas. Then $\{ \varphi, (\varphi \Longrightarrow \psi) \} \models \psi$.
:::

::: proof
Becuase $v(\varphi) = T$ and $v((\varphi \Longrightarrow \psi)) = T$ by @def-truth-assignment it must be the case that $v(\psi) = T$. Therefore $\{ \varphi, (\varphi \Longrightarrow \psi) \} \models \psi$.
:::

::: {#def-deduction-or-proof}
## Deduction or proof

Let $\Sigma$ be a set of formulas. A deduction or proof from $\Sigma$ in $\mathcal{L}_P$ is a finite sequence $\varphi_1 \varphi_2 \ldots \varphi_n$ of formulas such that for each $k \leq n$:

1.  $\varphi_k$ is an axiom
2.  $\varphi_k \in \Sigma$
3.  There are $i, j < k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

A formula of $\Sigma$ appearing in the deduction is called a *premiss*.

$\Sigma$ proves a formula $\alpha$, written as $\Sigma \vdash \alpha$, if $\alpha$ is the last formula of a deduction from $\Sigma$.

We will usually write $\vdash \alpha$ for $\emptyset \vdash \alpha$

We will take $\Sigma \vdash \Delta$ to mean that $\Sigma \vdash \delta$ for every formula $\delta \in \Delta$.
:::

::: {#exm-example-proof-1}
Show that $\vdash (\varphi \Longrightarrow \varphi)$

1.  $((\varphi \Longrightarrow ((\varphi \Longrightarrow \varphi) \Longrightarrow \varphi)) \Longrightarrow ((\varphi \Longrightarrow (\varphi \Longrightarrow \varphi)) \Longrightarrow (\varphi \Longrightarrow \varphi)))$ Axiom 2

2.  $(\varphi \Longrightarrow ((\varphi \Longrightarrow \varphi) \Longrightarrow \varphi))$ Axiom 1

3.  $((\varphi \Longrightarrow (\varphi \Longrightarrow \varphi)) \Longrightarrow (\varphi \Longrightarrow \varphi))$ Modus ponens 1, 2

4.  $(\varphi \Longrightarrow (\varphi \Longrightarrow \varphi))$ Axiom 1

5.  $(\varphi \Longrightarrow \varphi)$ Modus ponens 3, 4
:::

::: {#exm-example-proof-2}
Show that $\{ (\alpha \Longrightarrow \beta), (\beta \Longrightarrow \gamma) \} \vdash (\alpha \Longrightarrow \gamma)$

1.  $((\beta \Longrightarrow \gamma) \Longrightarrow (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)))$ Axiom 1

2.  $(\beta \Longrightarrow \gamma)$ Premiss

3.  $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ Modus ponens 1, 2

4.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$ Axiom 2

5.  $((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma))$ Modus ponens 4, 3

6.  $(\alpha \Longrightarrow \beta)$ Premiss

7.  $(\alpha \Longrightarrow \gamma)$ Modus ponens 5, 6
:::

::: {#exm-example-proof-3}
Show that $\vdash (((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha)$

1.  $(((\neg \alpha) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha))$ Axiom 3

2.  $((\neg \alpha) \Longrightarrow (\neg \alpha))$ @exm-example-proof-1

3.  $(((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha)$ Modus ponens 1, 2
:::

::: {#exr-exercise-proof-1}
Show that if $\alpha$, $\beta$, and $\gamma$ are formulas, then:

-   $\{ (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)), \beta \} \vdash (\alpha \Longrightarrow \gamma)$

-   $\vdash (\alpha \lor (\neg \alpha))$
:::

::: {#sol-exercise-proof-1}
In the case of $\{ (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)), \beta \} \vdash (\alpha \Longrightarrow \gamma)$

1.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$ Axiom 2

2.  $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ Premiss

3.  $((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma))$ Modus ponens 1, 2

4.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1

5.  $\beta$ Premiss

6.  $(\alpha \Longrightarrow \beta)$ Modus ponens 4, 5

7.  $(\alpha \Longrightarrow \gamma)$ Modus ponens 3, 6

In the case of $\vdash (\alpha \lor (\neg \alpha))$ by @sec-informal-conventions is it equivalent to $\vdash ((\neg \alpha) \Longrightarrow (\neg \alpha))$

1.  $((\neg \alpha) \Longrightarrow (\neg \alpha))$ @exm-example-proof-1
:::

::: {#exm-example-proof-4}
Let us show that $\vdash ((\neg (\neg \beta)) \Longrightarrow \beta)$

1.  $(((\neg \beta) \Longrightarrow (\neg (\neg \beta))) \Longrightarrow (((\neg \beta) \Longrightarrow (\neg \beta)) \Longrightarrow \beta))$ Axiom 3

2.  $((\neg (\neg \beta)) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg (\neg \beta))))$ Axiom 1

3.  $((\neg (\neg \beta)) \Longrightarrow (((\neg \beta) \Longrightarrow (\neg \beta)) \Longrightarrow \beta))$ @exm-example-proof-2 2, 1

4.  $((\neg \beta) \Longrightarrow (\neg \beta))$ @exm-example-proof-1

5.  $((\neg (\neg \beta)) \Longrightarrow \beta)$ @exr-exercise-proof-1 3, 4
:::

::: {#prp-sub-deduction}
If $\varphi_1 \varphi_2 \ldots \varphi_n$ is a deduction of $\mathcal{L}_P$, then $\varphi_1 \ldots \varphi_{\ell}$ is also a deduction of $\mathcal{L}_P$ for any $\ell$ such that $1 \leq \ell \leq n$.
:::

::: proof
Because $\varphi_1 \varphi_2 \ldots \varphi_n$ is a deduction of $\mathcal{L}_P$ then by @def-deduction-or-proof $\varphi_m$ for $1 \leq m \leq \ell n$ is an axiom, it belongs to a set of premisses or there are $i, j < m$ such that $\varphi_m$ follows from $\varphi_i$ and $\varphi_i$ by Modus Ponens. Therefore again by @def-deduction-or-proof $\varphi_1 \ldots \varphi_{\ell}$ is a deduction.
:::

::: {#prp-modus-ponens-deduction}
If $\Gamma \vdash \delta$ and $\Gamma \vdash (\delta \Longrightarrow \beta)$, then $\Gamma \vdash \beta$.
:::

::: proof
If $\Gamma \vdash \delta$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that $\varphi_n = \delta$.

Also if $\Gamma \vdash (\delta \Longrightarrow \beta)$ then there is a deduction $\psi_1 \ldots \psi_m$ such that $\psi_m = (\delta \Longrightarrow \beta)$.

Therefore we can build a deduction $\varphi_1 \ldots \varphi_n \psi_1 \ldots \psi_m \psi_{m+1}$ such that $\psi_{m+1} = \beta$ where it follows from $\varphi_n$ and $\psi_m$ by Modus Ponens.

By @def-deduction-or-proof and using $\varphi_1 \ldots \varphi_n \psi_1 \ldots \psi_m \psi_{m+1}$ we have that $\Gamma \vdash \beta$ because for each $k \leq n$ and $s \leq m + 1$:

-   $\varphi_k$ or $\psi_s$ is an axiom
-   $\varphi_k \in \Gamma$ or $\psi_s \in \Gamma$
-   there are $i,j \leq k$ or $i,j \leq s$ such that $\varphi_k$ or $\psi_s$ follows from $\varphi_i$ and $\varphi_j$ or from $\psi_i$ and $\psi_j$ by Modus Ponens.
:::

::: {#prp-subset-formulas-deduction}
If $\Gamma \subseteq \Delta$ and $\Gamma \vdash \alpha$, then $\Delta \vdash \alpha$.
:::

::: proof
Because $\Gamma \vdash \alpha$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that for each $k \leq n$:

-   $\varphi_k$ is an axiom
-   $\varphi_k \in \Gamma$
-   there are $i,j \leq k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Because $\Gamma \subseteq \Delta$ then we also have that:

-   $\varphi_k$ is an axiom
-   $\varphi_k \in \Delta$
-   there are $i,j \leq k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Therefore $\Delta \vdash \alpha$.
:::

::: {#prp-set-formulas-transitivity-deduction}
If $\Gamma \vdash \Delta$ and $\Delta \vdash \sigma$, then $\Gamma \vdash \sigma$.
:::

::: proof
If $\Gamma \vdash \Delta$ then $\Gamma \vdash \delta$ for every formula $\delta \in \Delta$. Therefore there is a deduction $\psi_1 \ldots \psi_m$ such that for each $k \leq m$:

-   $\psi_k$ is an axiom
-   $\psi_k \in \Gamma$
-   there are $i,j \leq k$ such that $\psi_k$ follows from $\psi_i$ and $\psi_j$ by Modus Ponens.

Because $\Gamma \vdash \delta$ for every formula $\delta \in \Delta$ then $\psi_m = \delta$.

Also if $\Delta \vdash \sigma$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that for each $s \leq n$:

-   $\varphi_s$ is an axiom
-   $\varphi_s \in \Delta$
-   there are $i,j \leq s$ such that $\varphi_s$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Because $\Delta \vdash \sigma$ then $\varphi_n = \sigma$.

Therefore we can build a deduction $\psi_1 \ldots \psi_m \varphi_1 \ldots \varphi_n$ such that for each $k \leq m$ and $s \leq n$:

-   $\psi_k$ or $\varphi_s$ is an axiom
-   $\psi_k \in \Gamma$ or $\varphi_s \in \Gamma$
-   there are $i,j \leq k$ or $i,j \leq s$ such that $\psi_k$ or $\varphi_s$ follows from $\psi_i$ and $\psi_j$ or from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Therefore $\Gamma \vdash \sigma$.
:::

::: {#thm-deduction-theorem}
## Deduction Theorem

If $\Sigma$ is any set of formulas and $\alpha$ and $\beta$ are any formulas, then $\Sigma \vdash (\alpha \Longrightarrow \beta)$ if and only if $\Sigma \cup \{ \alpha \} \vdash \beta$.
:::

::: proof
-   Assume $\Sigma \vdash (\alpha \Longrightarrow \beta)$

    -   If $\Sigma \cup \{ \alpha \}$ then because $\alpha$ is a premiss we have that $\Sigma \cup \{ \alpha \} \vdash \alpha$

    -   Also because $\Sigma \subseteq \Sigma \cup \{ \alpha \}$ and $Σ \vdash (\alpha \Longrightarrow \beta)$ by @prp-subset-formulas-deduction $\Sigma \cup \{ \alpha \} \vdash (\alpha \Longrightarrow \beta)$

    -   Finally, because $\Sigma \cup \{ \alpha \} \vdash \alpha$ and $\Sigma \cup \{ \alpha \} \vdash (\alpha \Longrightarrow \beta)$ by @prp-modus-ponens-deduction $\Sigma \cup \{ \alpha \} \vdash \beta$

-   Assume $\Sigma \cup \{ \alpha \} \vdash \beta$

    -   By strong induction on $n$, the length of deduction or proof of $\beta$ from $\Sigma \cup \{ \alpha \}$

        -   *Base step* $(n = 1)$: Then $\beta$ is an axiom or $\beta \in \Sigma \cup \{ \alpha \}$

            -   If $\beta$ is an axiom then we can proof $(\alpha \Longrightarrow \beta)$ from $\Sigma$ in the following way:

                1.  $\beta$ Axiom 1, 2 or 3
                2.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1
                3.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 2, 1

            -   If $\beta \in \Sigma$ then:

                1.  $\beta$ Premiss
                2.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1
                3.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 2, 1

            -   If $\beta = \alpha$ then $(\alpha \Longrightarrow \beta) = (\alpha \Longrightarrow \alpha)$ and we can use @exm-example-proof-1.

        -   *Induction hypothesis* $(n \leq k)$: Assume that if there is a deduction or proof of length $n \leq k$ of $\beta$ from $\Sigma \cup \{ \alpha \}$ then $\Sigma \vdash (\alpha \Longrightarrow \beta)$.

        -   *Induction step* $(n = k + 1)$: Suppose there is a deduction or proof of length $n = k + 1$ of $\beta$ from $\Sigma \cup \{ \alpha \}$.

            -   Therefore there are 3 possibilities by @def-deduction-or-proof: $\beta$ is an axiom, $\beta \in \Sigma \cup \{ \alpha \}$ or there are $i,j \leq k + 1$ such that $\beta$ follows from $\psi_i$ and $\psi_j$.

                -   The first 2 possibilities are cover in the *Base step* where we can show in a similar way that $\Sigma \vdash (\alpha \Longrightarrow \beta)$.

                -   In the case of the last possibility and without loss of generality $\psi_i = (\psi_j \Longrightarrow \beta)$. Furthermore, $\Sigma \cup \{ \alpha \} \vdash \psi_i$ and $\Sigma \cup \{ \alpha \} \vdash \psi_j$ are deductions of length $n \leq k$.

                    -   By the *Induction hypothesis* $\Sigma \vdash (\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$ and $\Sigma \vdash (\alpha \Longrightarrow \psi_j)$. Therefore:

                        1.  $(\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$ because $\Sigma \vdash (\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$

                        2.  $(\alpha \Longrightarrow \psi_j)$ because $\Sigma \vdash (\alpha \Longrightarrow \psi_j)$

                        3.  $((\alpha \Longrightarrow (\psi_j \Longrightarrow \beta)) \Longrightarrow ((\alpha \Longrightarrow \psi_j) \Longrightarrow (\alpha \Longrightarrow \beta)))$ Axiom 2

                        4.  $((\alpha \Longrightarrow \psi_j) \Longrightarrow (\alpha \Longrightarrow \beta))$ Modus Ponens 3, 1

                        5.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 4, 2

                -   In any case we have that $\Sigma \vdash (\alpha \Longrightarrow \beta)$.
:::

::: {#exm-deduction-theorem-example-1}
Show that $\vdash (\psi \Longrightarrow \psi)$. Using @thm-deduction-theorem this is equivalent to $\emptyset \cup \{ \psi \} \vdash \psi$. Therefore:

1.  $\psi$ Premiss

Compare it to @exm-example-proof-1.
:::

::: {#exr-application-deduction-theorem}
Show that:

1.  $\{ \delta, (\neg \delta) \} \vdash \gamma$
2.  $\vdash (\psi \Longrightarrow (\neg (\neg \psi)))$
3.  $\vdash (((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow \beta))$
4.  $\vdash ((\alpha \Longrightarrow \beta) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg \alpha)))$
5.  $\vdash ((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$
6.  $\vdash (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow ((\neg \alpha) \Longrightarrow \beta))$
7.  $\vdash (\sigma \Longrightarrow (\sigma \lor \tau))$
8.  $\{ (\alpha \land \beta) \} \vdash \beta$
9.  $\{ (\alpha \land \beta) \} \vdash \alpha$
10. $\{ \alpha, \beta \} \vdash (\alpha \land \beta)$
11. $\{ (\alpha \land \beta) \} \vdash (\beta \land \alpha)$
12. $\{ (\alpha \iff \beta) \} \vdash ((\neg \alpha) \iff (\neg \beta))$
13. $(\alpha \land (\neg \alpha)) \vdash (\neg (\alpha \Longrightarrow \alpha))$
14. $(\alpha \Longrightarrow \beta) \vdash (\neg (\alpha \land (\neg \beta)))$
15. $((\neg \alpha) \Longrightarrow (\neg (\neg \beta))) \vdash ((\neg \alpha) \Longrightarrow \beta)$
16. $(\neg (\alpha \lor \beta)) \vdash ((\neg \alpha) \land (\neg \beta))$
17. $(\alpha \lor \beta) \vdash (\beta \lor \alpha)$
:::

::: {#sol-application-deduction-theorem}
-   $\{ \delta, (\neg \delta) \} \vdash \gamma$

    1.  $(((\neg \gamma) \Longrightarrow (\neg \delta)) \Longrightarrow (((\neg \gamma) \Longrightarrow \delta) \Longrightarrow \gamma))$ Axiom 3

    2.  $((\neg \delta) \Longrightarrow ((\neg \gamma) \Longrightarrow (\neg \delta)))$ Axiom 1

    3.  $(\neg \delta)$ Premiss

    4.  $(((\neg \gamma) \Longrightarrow \delta) \Longrightarrow \gamma)$ Modus Ponens 2, 3

    5.  $(\delta \Longrightarrow ((\neg \gamma) \Longrightarrow \delta))$ Axiom 1

    6.  $\delta$ Premiss

    7.  $((\neg \gamma) \Longrightarrow \delta)$ Modus Ponens 5, 6

    8.  $\gamma$ Modus Ponens 4, 7

-   $\vdash (\psi \Longrightarrow (\neg (\neg \psi)))$

    1.  $(((\neg (\neg (\neg \psi))) \Longrightarrow (\neg \psi)) \Longrightarrow (((\neg (\neg (\neg \psi))) \Longrightarrow \psi) \Longrightarrow (\neg (\neg \psi))))$ Axiom 3

    2.  $((\neg (\neg (\neg \psi))) \Longrightarrow (\neg \psi))$ @exm-example-proof-4

    3.  $(((\neg (\neg (\neg \psi))) \Longrightarrow \psi) \Longrightarrow (\neg (\neg \psi)))$ Modus Ponens 1, 2

    4.  $(\psi \Longrightarrow ((\neg (\neg (\neg \psi))) \Longrightarrow \psi))$ Axiom 1

    5.  $(\psi \Longrightarrow (\neg (\neg \psi)))$ @exm-example-proof-2 4, 3

-   By @thm-deduction-theorem $\vdash (((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow \beta))$ is equivalent to $\{ ((\neg \beta) \Longrightarrow (\neg \alpha)) \} \vdash (\alpha \Longrightarrow \beta)$

    1.  $(((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta))$ Axiom 3

    2.  $((\neg \beta) \Longrightarrow (\neg \alpha))$ Premiss

    3.  $(((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta)$ Modus Ponens 1, 2

    4.  $(\alpha \Longrightarrow ((\neg \beta) \Longrightarrow \alpha))$ Axiom 1

    5.  $(\alpha \Longrightarrow \beta)$ @exm-example-proof-2 4, 3

-   By @thm-deduction-theorem $\vdash ((\alpha \Longrightarrow \beta) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg \alpha)))$ it is equivalent to $\{ (\alpha \Longrightarrow \beta) \} \vdash ((\neg \beta) \Longrightarrow (\neg \alpha))$

    1.  $(((\neg (\neg \alpha)) \Longrightarrow (\neg(\neg \beta))) \Longrightarrow (((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)) \Longrightarrow (\neg \alpha)))$ Axiom 1

    2.  $(\alpha \Longrightarrow \beta)$ Premiss

    3.  $(\beta \Longrightarrow (\neg (\neg \beta)))$ @exr-application-deduction-theorem 2

    4.  $(\alpha \Longrightarrow (\neg (\neg \beta)))$ @exm-example-proof-2 2, 3

    5.  $((\neg (\neg \alpha)) \Longrightarrow \alpha)$ @exm-example-proof-4

    6.  $((\neg (\neg \alpha)) \Longrightarrow (\neg (\neg \beta)))$ @exm-example-proof-2 5, 4

    7.  $(((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)) \Longrightarrow (\neg \alpha))$ Modus Ponens 1, 6

    8.  $((\neg \beta) \Longrightarrow ((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)))$ Axiom 1

    9.  $((\neg \beta) \Longrightarrow (\neg \alpha))$ @exm-example-proof-2 8, 7

-   By @thm-deduction-theorem $\vdash ((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ is equivalent to $\{ (\beta \Longrightarrow (\neg \alpha)) \} \vdash (\alpha \Longrightarrow (\neg \beta))$

    1.  $(\beta \Longrightarrow (\neg \alpha))$ Premiss

    2.  $((\neg (\neg \alpha)) \Longrightarrow (\neg \beta))$ @exr-application-deduction-theorem 4 applied to 1

    3.  $(\alpha \Longrightarrow (\neg (\neg \alpha)))$ @exr-application-deduction-theorem 2

    4.  $(\alpha \Longrightarrow (\neg \beta))$ @exm-example-proof-2 3, 2

-   By @thm-deduction-theorem $\vdash (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow ((\neg \alpha) \Longrightarrow \beta))$ is equivalent to $\{ ((\neg \beta) \Longrightarrow \alpha) \} \vdash ((\neg \alpha) \Longrightarrow \beta)$

    1.  $((\neg \beta) \Longrightarrow \alpha)$ Premiss

    2.  $((\neg \alpha) \Longrightarrow (\neg (\neg \beta)))$ @exr-application-deduction-theorem 4 applied to 1

    3.  $((\neg (\neg \beta)) \Longrightarrow \beta)$ @exm-example-proof-4

    4.  $((\neg \alpha) \Longrightarrow \beta)$ @exm-example-proof-2 2, 3

-   By @sec-informal-conventions $\vdash (\sigma \Longrightarrow (\sigma \lor \tau))$ is equivalent to $\vdash (\sigma \Longrightarrow ((\neg \sigma) \Longrightarrow \tau))$. Also applying 2 times @thm-deduction-theorem $\vdash (\sigma \Longrightarrow ((\neg \sigma) \Longrightarrow \tau))$ is equivalent to $\{ \sigma, (\neg \sigma) \} \vdash \tau$

    1.  $\tau$ @exr-application-deduction-theorem 1

-   By @sec-informal-conventions $\{ (\alpha \land \beta) \} \vdash \beta$ is equivalent to $\{ (\neg (\alpha \Longrightarrow (\neg \beta))) \} \vdash \beta$.

    1.  $(((\neg \beta) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta))$ Axiom 3

    2.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))))$ Axiom 1

    3.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow (((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta))$ @exm-example-proof-2 2, 1

    4.  $(\neg (\alpha \Longrightarrow (\neg \beta)))$ Premiss

    5.  $(((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta)$ Modus ponens 3, 4

    6.  $((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ Axiom 1

    7.  $\beta$ Modus Ponens 5, 6

-   By @sec-informal-conventions $\{ (\alpha \land \beta) \} \vdash \alpha$ is equivalent to $\{ (\neg (\alpha \Longrightarrow (\neg \beta))) \} \vdash \alpha$.

    1.  $(((\neg \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (((\neg \alpha) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \alpha))$ Axiom 3

    2.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow ((\neg \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))))$ Axiom 1

    3.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow (((\neg \alpha) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \alpha))$ @exm-example-proof-2 2, 1

    4.  $(\neg (\alpha \Longrightarrow (\neg \beta)))$ Premiss

    5.  $(((\neg \alpha) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \alpha)$ Modus ponens 3, 4

    6.  $((\neg \alpha) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ @thm-deduction-theorem and @exr-application-deduction-theorem 1[^chapter_1-3].

    7.  $\alpha$ Modus Ponens 5, 6

-  By @sec-informal-conventions $\{ \alpha, \beta \} \vdash (\alpha \land \beta)$ is equivalent to $\{ \alpha, \beta \} \vdash (\neg (\alpha \Longrightarrow (\neg \beta)))$.

    1. $(((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (\neg \alpha)) \Longrightarrow$ $(((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))))$ Axiom 3
    
    2.  $(((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\beta \Longrightarrow (\neg \alpha))) \Longrightarrow$ $(((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow \beta) \Longrightarrow ((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\neg \alpha))))$ Axiom 2
    
    3.  $((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\beta \Longrightarrow (\neg \alpha)))$ @exm-example-proof-4
    
    4.  $(((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow \beta) \Longrightarrow ((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\neg \alpha)))$ Modus Ponens  2, 3
    
    5.  $(\beta \Longrightarrow ((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow \beta))$ Axiom 1
    
    6.  $(\beta \Longrightarrow ((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\neg \alpha)))$ @exm-example-proof-2 5, 4
    
    7.  $\beta$ Premiss
    
    8.  $((\neg (\neg (\beta \Longrightarrow (\neg \alpha)))) \Longrightarrow (\neg \alpha))$ Modus Ponens 6, 7
    
    9.  $((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\neg (\neg (\beta \Longrightarrow (\neg \alpha)))))$ @exr-application-deduction-theorem 2
    10.  $((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\neg \alpha))$ @exm-example-proof-2 9, 8
    
    11.  $((\alpha \Longrightarrow (\neg \beta)) \Longrightarrow (\beta \Longrightarrow (\neg \alpha)))$ @exr-application-deduction-theorem 5
    
    12.  $((\alpha \Longrightarrow (\neg \beta)) \Longrightarrow (\neg \alpha))$ @exm-example-proof-2 11, 10
    
    13.  $((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ @exm-example-proof-4
    
    14.  $((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (\neg \alpha))$ @exm-example-proof-2 13, 12
    
    15.  $(((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta))))$ Modus Ponens 1, 14
    
    16.  $(\alpha \Longrightarrow ((\neg (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow \alpha))$ Axiom 1
    
    17.  $(\alpha \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta))))$ @exm-example-proof-2 16, 15
    
    18.  $\alpha$ Premiss
    
    19.  $(\neg (\alpha \Longrightarrow (\neg \beta)))$ Modus Ponens 17, 18
    
-  $\{ (\alpha \land \beta) \} \vdash (\beta \land \alpha)$

    1.  $\beta$ @exr-application-deduction-theorem 8
    
    2.  $\alpha$ @exr-application-deduction-theorem 9
    
    3.  $(\beta \land \alpha)$ @exr-application-deduction-theorem 10 applied to 8, 9 
    
-  By @sec-informal-conventions $\{ (\alpha \iff \beta) \} \vdash ((\neg \beta) \iff (\neg \alpha))$ is equivalent to $\{ (\alpha \Longrightarrow \beta) \land (\beta \Longrightarrow \alpha) \} \vdash ((\neg \alpha) \iff (\neg \beta))$

    1.  $(\beta \Longrightarrow \alpha)$ @exr-application-deduction-theorem 8
    
    2.  $((\neg \alpha) \Longrightarrow (\neg \beta))$ @exr-application-deduction-theorem 4 applied to 1

    3.  $(\alpha \Longrightarrow \beta)$ @exr-application-deduction-theorem 9    

    4.  $((\neg \beta) \Longrightarrow (\neg \alpha))$ @exr-application-deduction-theorem 4 applied to 3

    5.  $(((\neg \alpha) \Longrightarrow (\neg \beta)) \land ((\neg \beta) \Longrightarrow (\neg \alpha)))$ @exr-application-deduction-theorem 10 applied to 2, 4
    
    6.  $((\neg \alpha) \iff (\neg \beta))$ @sec-informal-conventions 5
    
-  $(\alpha \land (\neg \alpha)) \vdash (\neg (\alpha \Longrightarrow \alpha))$

    1.  $(((\neg (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))))$ Axiom 3
    
    2.  $((\neg \alpha) \Longrightarrow ((\neg (\alpha \Longrightarrow \alpha)) \Longrightarrow (\neg \alpha)))$ Axiom 1
    
    3.  $((\neg \alpha) \Longrightarrow (((\neg (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))))$ @exm-example-proof-2 2, 1
    
    4.  $(\neg \alpha)$ @exr-application-deduction-theorem 8
    
    5.  $(((\neg (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$ Modus Ponens 3, 4
    
    6.  $(\alpha \Longrightarrow ((\neg (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow \alpha))$ Axiom 1
    
    7.  $(\alpha \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$ @exm-example-proof-2 6, 5  
    
    8.  $\alpha$ @exr-application-deduction-theorem 9
    
    9.  $(\neg (\alpha \Longrightarrow \alpha))$ Modus Ponens 7, 8
    
-  $(\alpha \Longrightarrow \beta) \vdash (\neg (\alpha \land (\neg \beta)))$

    1.  $(\alpha \Longrightarrow \beta)$ Premiss
    
    2.  $(\beta \Longrightarrow (\neg (\neg \beta)))$ @exr-application-deduction-theorem 2
    
    3.  $(\alpha \Longrightarrow (\neg (\neg \beta)))$ @exm-example-proof-2 1, 2
    
    4.  $(\alpha \Longrightarrow (\neg (\neg \beta))) \Longrightarrow (\neg (\neg (\alpha \Longrightarrow (\neg (\neg \beta)))))$ @exr-application-deduction-theorem 2
    
    5.  $(\neg (\alpha \land (\neg \beta)))$ @sec-informal-conventions 4
    
-  $((\neg \alpha) \Longrightarrow (\neg (\neg \beta))) \vdash ((\neg \alpha) \Longrightarrow \beta)$

    1.  $((\neg \alpha) \Longrightarrow (\neg (\neg \beta)))$ Premiss
    
    2.  $((\neg (\neg \beta)) \Longrightarrow \beta)$ @exm-example-proof-2
    
    3.  $((\neg \alpha) \Longrightarrow \beta)$ @exm-example-proof-2 1, 2

-  By @sec-informal-conventions $(\neg (\alpha \lor \beta)) \vdash ((\neg \alpha) \land (\neg \beta))$ is equivalent to $(\neg ((\neg \alpha) \Longrightarrow \beta)) \vdash (\neg ((\neg \alpha) \Longrightarrow (\neg (\neg \beta))))$

    1.  $(((\neg \alpha) \Longrightarrow (\neg (\neg \beta))) \Longrightarrow ((\neg \alpha) \Longrightarrow \beta))$ @exr-application-deduction-theorem 15 and @thm-deduction-theorem
    
    2.  $((\neg((\neg \alpha) \Longrightarrow \beta)) \Longrightarrow (\neg ((\neg \alpha) \Longrightarrow (\neg (\neg \beta)))))$ @exr-application-deduction-theorem 4
    
    3.  $(\neg ((\neg \alpha) \Longrightarrow \beta))$ Premiss
    
    4.  $(\neg ((\neg \alpha) \Longrightarrow (\neg (\neg \beta))))$ Modus ponens 2, 3

       
-  By @sec-informal-conventions $(\alpha \lor \beta) \vdash (\beta \lor \alpha)$ is equivalent to $(\alpha \Longrightarrow (\neg \beta)) \vdash (\beta \Longrightarrow (\neg \alpha))$

    1.  $((\alpha \Longrightarrow (\neg \beta)) \Longrightarrow (\beta \Longrightarrow (\neg \alpha)))$ @exr-application-deduction-theorem 5
    
    2.  $(\alpha \Longrightarrow (\neg \beta))$ Premiss
    
    3.  $(\beta \Longrightarrow (\neg \alpha))$ Modus Ponens 1, 2

:::

[^chapter_1-3]: $\vdash ((\neg \alpha) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ is equivalent to $\{ (\neg \alpha), \alpha \} \vdash (\neg \beta)$ and this result has already been prove in @exr-application-deduction-theorem 1.

### Soundness and Completeness

How are deduction and implication related? See for example @prp-truth-tables-deduction-theorem and @thm-deduction-theorem.

The *Soundness* and *Completeness Theorems* say that $\Sigma \vdash \psi$ if and only if $\Sigma \models \psi$, i.e. $\vdash$ and $\models$ are equivalent for propositional logic [@bilaniuk_problem_2009, p. 15].

::: {#thm-soundness-theorem}
## Soundness theorem

If $\Delta$ is a set of formulas and $\alpha$ is a formula such that $\Delta \vdash \alpha$, then $\Delta \models \alpha$.
:::

::: proof
By strong induction on $n$, the length of deduction or proof of $\alpha$ from $\Delta$:

*Base step* $(n = 1)$: Then $\alpha$ is an axiom or $\alpha \in \Delta$.

-   If $\alpha$ is an axiom then by @prp-axioms-lp-tautology is a tautology so for every truth assignment $v$ we have that $v(\alpha) = T$. If $v(\delta) = T$ for some truth assignment $v$ for all $\delta \in \Delta$ then $\Delta \models \alpha$.

    -   What happen if $\Delta = \emptyset$?

        -   $\alpha$ will be an axiom so by @prp-axioms-lp-tautology it can't be a contradiction.

-   If $\alpha \in \Delta$ and assuming that $v(\delta) = T$ for some truth assignment $v$ for all $\delta \in \Delta$ then $\Delta \models \alpha$.

    -   What happen if $\alpha$ is a contradiction?

        -   We still have that $\{ \alpha \} \vdash \alpha$

        -   In the case of $\{ \alpha \} \models \alpha \iff ((\forall v)((\forall \sigma)(\sigma \in \{ \alpha \} \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\alpha)=T)$ we have that $v(\sigma) = T$ is false because $\{ \alpha\}$ contains a contradiction so $(\forall v)((\forall \sigma)(\sigma \in \{ \alpha \} \Longrightarrow v(\sigma)=T))$ will be false and $((\forall v)((\forall \sigma)(\sigma \in \{ \alpha \} \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\alpha)=T)$ will be true.

            -   The above results doesn't contradicts @prp-set-formulas-satisfiable because in this case $\{ \alpha \}$ is not satisfiable and there exist a contradiction $\alpha$ such that $\{ \alpha \} \models \alpha$.

*Induction hypothesis* $(n \leq k)$: Assume that if there is a deduction or proof of length $n \leq k$ of $\alpha$ from $\Delta$ then $\Delta \models \alpha$.

*Induction step* $(n = k + 1)$: Suppose there is a deduction or proof of length $n = k + 1$ of $\alpha$ from $\Delta$.

-   Therefore there are 3 possibilities by @def-deduction-or-proof: $\alpha$ is an axiom, $\alpha \in \Delta$ or there are $i,j \leq k + 1$ such that $\alpha$ follows from $\psi_i$ and $\psi_j$.

    -   The first 2 possibilities are cover in the *Base step* where we can show in a similar way that $\Delta \models \alpha$.

    -   In the case of the last possibility and without loss of generality $\psi_i = (\psi_j \Longrightarrow \alpha)$. Furthermore, $\Delta \vdash \psi_i$ and $\Delta \vdash \psi_j$ are deductions of length $n \leq k$.

        -   By the *Induction hypothesis* $\Delta \models (\psi_j \Longrightarrow \alpha)$ and $\Delta \models \psi_j$. Therefore:

        -   For all truth assignment $v$ we have that if $\delta \in \Delta$ then $v(\delta) = T$, $v((\psi_j \Longrightarrow \alpha)) = T$ and $v(\psi_j) = T$.

        -   By @def-truth-assignment $v(\alpha) = T$ so $\Delta \models \alpha$

    -   In any case $\Delta \models \alpha$.
:::

::: {#nte-soundness-plain-english .callout-note}
-   Soundness guarantees that if you can deduce or prove something using the rules of the logical system, then that something is actually true.

-   It ensures that the system's rules of deduction are reliable and do not lead to false conclusions.

    -   In the case of $\mathcal{L}_p$ the rules are described in @def-axioms-lp, @def-modus-ponens and @def-deduction-or-proof.
:::

::: {#def-inconsistent-consisten-formula}

A set of formulas $\Gamma$ is *inconsistent* if $Γ \vdash (\neg (\alpha \Longrightarrow \alpha))$ for some formula $\alpha$, and *consistent* if it is not inconsistent.

:::

For example $\{ \alpha, (\neg \alpha) \}$ is inconsistent by @exr-application-deduction-theorem 1 because $\{ \alpha, (\neg \alpha) \} \vdash (\neg (\alpha \Longrightarrow \alpha))$. What happen if $\beta$ is a formula that is satisfiable?

::: {#prp-satisfiable-consistent-formula}

If a set of formulas is satisfiable, then it is consistent.

:::

::: {.proof}

This is equivalent to show that if a set of formulas is inconsistent then it is not satisfiable[^chapter_1-4]. Therefore:

-  Let $\Delta$ a set of formulas such that $\Delta \vdash (\neg (\alpha \Longrightarrow \alpha))$.

-  By @thm-soundness-theorem $\Delta \models (\neg (\alpha \Longrightarrow \alpha))$

    -  Because $(\alpha \Longrightarrow \alpha)$ is a tautology by @def-tautology-contradiction $(\neg (\alpha \Longrightarrow \alpha))$ is a contradiction.
    
    -  Therefore by @prp-set-formulas-satisfiable $\Delta$ is not satisfiable because there exist a contradiction $\chi$ such that $\Delta \models \chi$ where $\chi = (\neg (\alpha \Longrightarrow \alpha))$.

:::

[^chapter_1-4]: By @exr-application-deduction-theorem 3 and @thm-deduction-theorem $((\neg \beta) \Longrightarrow (\neg \alpha)) \vdash (\alpha \Longrightarrow \beta)$. Also using a truth table it is possible to show that $((\neg \beta) \Longrightarrow (\neg \alpha)) \models (\alpha \Longrightarrow \beta)$.

::: {#prp-inconsistent-set-formulas-deduction}

Suppose $\Delta$ is an inconsistent set of formulas.
Then $\Delta \vdash \psi$ for any formula $\psi$.

:::

::: {.proof}

If $\Delta$ is an inconsistent set of formulas then $\Delta \vdash (\neg (\alpha \Longrightarrow \alpha))$.

Also it is possible to show that $\{ (\neg (\alpha \Longrightarrow \alpha)) \} \vdash \psi$:

1.  $(((\neg \psi) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow (((\neg \psi) \Longrightarrow (\alpha \Longrightarrow \alpha)) \Longrightarrow \psi))$ Axiom 1

2.  $((\neg (\alpha \Longrightarrow \alpha)) \Longrightarrow ((\neg \psi) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))))$ Axiom 1

3. $((\neg (\alpha \Longrightarrow \alpha)) \Longrightarrow (((\neg \psi) \Longrightarrow (\alpha \Longrightarrow \alpha)) \Longrightarrow \psi))$ @exm-example-proof-2 2, 1

4.  $(\neg (\alpha \Longrightarrow \alpha))$ Premiss

5.  $(((\neg \psi) \Longrightarrow (\alpha \Longrightarrow \alpha)) \Longrightarrow \psi)$ Modus Ponens 3, 4

6. $((\alpha \Longrightarrow \alpha) \Longrightarrow ((\neg \psi) \Longrightarrow (\alpha \Longrightarrow \alpha)))$ Axiom 1

7.  $((\alpha \Longrightarrow \alpha) \Longrightarrow \psi)$ @exm-example-proof-2 6, 5

8.  $(\alpha \Longrightarrow \alpha)$ @exm-example-proof-1

9.  $\psi$ Modus ponens 7, 8

Finally, because $\Delta \vdash (\neg (\alpha \Longrightarrow \alpha))$ and $\{ (\neg (\alpha \Longrightarrow \alpha)) \} \vdash \psi$ by @prp-set-formulas-transitivity-deduction $\Delta \vdash \psi$.

:::

::: {#prp-inconsisten-formulas-subset}

$\Sigma$ is an inconsistent set of formulas if and only if there is a finite subset $\Delta$ of $\Sigma$ such that $\Delta$ is inconsistent.

:::

::: {#wrn-contradiction-empty-set-deduction .callout-warning}

It is possible that $\vdash \sigma$ where $\sigma$ is a contradiction?

If $\vdash \sigma$ then there is a deduction $\psi_1 \ldots \psi_n$ where $\psi_n = \sigma$ and for each $k \leq n$:

-  $\psi_k$ is an axiom
-  there are $i, j < k$ such that $\psi_k$ follows from $\psi_i$ and $\psi_j$ by Modus Ponens.

Taking into account that $\emptyset \vdash \sigma$ so it will not be possible that $\sigma \in \emptyset$.

Finally by @prp-axioms-lp-tautology every axiom of $\mathcal{L}_p$ is a tautology and by @prp-modus-ponens-implies it is not possible to obtain a contradiction by using Modus Ponens.

Therefore if $\vdash \sigma$ then $\sigma$ can't be a contradiction.

:::

::: {.proof}

-  Assume $\Sigma \vdash (\neg (\alpha \Longrightarrow \alpha))$ then by @wrn-contradiction-empty-set-deduction $\Sigma \neq \emptyset$. Also by @thm-deduction-theorem there is a deduction $\psi_1 \ldots \psi_n$ where $\psi_n = (\neg (\alpha \Longrightarrow \alpha))$ and for each $k \leq n$:

   -  $\psi_k$ is an axiom
   -  $\psi_k \in \Sigma$
   -  there are $i, j < k$ such that $\psi_k$ follows from $\psi_i$ and $\psi_j$ by Modus Ponens. 

      -  If some or all $\psi_k \in \Sigma$ then $\Delta \subseteq \Sigma$ will be the set of formulas than contains the $\psi_k$ used in $\psi_1 \ldots \psi_n$. Therefore $\Delta \vdash (\neg (\alpha \Longrightarrow \alpha))$ where $\Delta \neq \emptyset$ by @wrn-contradiction-empty-set-deduction.

         -  To illustrate when $\Delta = \Sigma$ or $\Delta \subset \Sigma$ we can point out the following examples:
   
            -  $\Sigma = \{ \alpha, ((\beta \Longrightarrow \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))) \}$ or $\Sigma = \{ (\neg (\alpha \Longrightarrow \alpha)) \}$.
   
            - $\Sigma = \{ \alpha, (\alpha \Longrightarrow (\alpha \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))), (\alpha \Longrightarrow \alpha) \}$ where $\Delta = \{ \alpha, (\alpha \Longrightarrow (\alpha \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))) \}$ or $\Sigma = \{ (\neg (\alpha \Longrightarrow \alpha)), (\alpha \Longrightarrow \alpha) \}$ where $\Delta = \{ (\neg (\alpha \Longrightarrow \alpha)) \}$.

-  Assume $\Delta \subseteq \Sigma$ such that $\Delta \vdash (\neg (\alpha \Longrightarrow \alpha))$.

   -  By @prp-subset-formulas-deduction $\Sigma \vdash (\neg (\alpha \Longrightarrow \alpha))$ so $\Sigma$ is inconsistent. 

:::

::: {#cor-inconsistent-formulas-subset}

A set of formulas $\Gamma$ is consistent if and only if every finite subset of $\Gamma$ is consistent.

:::

::: {.proof}

This is equivalent to show that $\Gamma$ is an inconsistent set of formulas if and only if there is a finite subset $\Delta$ of $\Gamma$ such that $\Delta$ is inconsistent[^chapter_1-5]. Therefore by @prp-inconsisten-formulas-subset this is already proved. 

:::

[^chapter_1-5]: By @exr-application-deduction-theorem 12 $(\alpha \iff \beta) \vdash ((\neg \alpha) \iff (\neg \beta))$. Also using a truth table it is possible to show that $(\alpha \iff \beta) \models ((\neg \alpha) \iff (\neg \beta))$.

::: {#def-formulas-maximally-consistent}

A set of formulas $\Sigma$ is maximally consistent if $\Sigma$ is consistent but $\Sigma \cup \{ \psi \}$ is inconsistent for any $\psi \not \in \Sigma$.

:::

::: {#exr-maximally-consistent-1}

Suppose $v$ is a truth assignment. Show that $\Sigma =
\{ \psi \mid v(\psi) = T \}$ is maximally consistent.

:::

::: {#sol-maximally-consistent-1}

First, $\Sigma$ is satisfiable because $v$ is a truth assignment that satisfies $\Sigma$ taking into account that $v(\psi) = T$. Then by @prp-satisfiable-consistent-formula $\Sigma$ is consistent.

Second, let $\Sigma \cup \{ \beta \} = \{ \psi, \beta \}$ where $\beta \not \in \Sigma$. Because $\beta \not \in \Sigma$ then $v(\beta) = F$. By @def-truth-assignment $v((\neg \beta)) = T$ so $(\neg \beta) \in \Sigma$. Therefore we can prove that $\Sigma \cup \{ \beta \} \vdash (\neg (\alpha \Longrightarrow \alpha))$:

1. $\beta$ Premiss

2. $(\neg \beta) \in \Sigma$

3. $(\neg (\alpha \Longrightarrow \alpha))$ @exr-application-deduction-theorem 1 applied to 1, 2

Therefore, $\Sigma$ is maximally consistent.

:::

::: {#prp-belongs-maximally-consistent}

If $\Sigma$ is a maximally consistent set of formulas,
$\psi$ is a formula and $\Sigma \vdash \psi$ then $\psi \in \Sigma$.

:::

::: {#nte-proof-by-reductio-ad-absurdum .callout-note}

## Proof by reductio ad absurdum 

A proof by reductio ad absurdum is a way to prove $\beta$ by showing that $(\neg \beta)$ leads to a contradiction [@mendelson_number_2008, p. 7, Exercise 5]. That is, $((\neg \beta) \Longrightarrow (\alpha \land (\neg \alpha))) \models \beta$[^chapter_1-6].

```{r}
#| results: asis

reductio_ad_absurdum <- tibble(
 `$\\beta$` = c("$T$", "$F$"), 
 `$(\\neg \\beta)$` = c("$F$", "$T$"),
 `$(\\alpha \\land (\\neg \\alpha))$` = c("$F$", "$F$"),
 `$((\\neg \\beta) \\Longrightarrow (\\alpha \\land (\\neg \\alpha)))$` = c("$T$", "$F$")
)

kbl(reductio_ad_absurdum, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

:::

[^chapter_1-6]: By @exr-application-deduction-theorem 13 $(\alpha \land (\neg \alpha)) \vdash (\neg (\alpha \Longrightarrow \alpha))$. Also both formulas are contradictions.

::: {.proof}

By @nte-proof-by-reductio-ad-absurdum and @exr-application-deduction-theorem 14 assume that $\Sigma$ is a maximally consistent set of formulas,
$\psi$ is a formula, $\Sigma \vdash \psi$ and $\psi  \not \in \Sigma$.

Because $\psi  \not \in \Sigma$ and $\Sigma$ is maximally consistent then $\Sigma \cup \{ \psi \} \vdash (\neg (\alpha \Longrightarrow) \alpha)$. 

By @thm-deduction-theorem $\Sigma \vdash (\psi \Longrightarrow (\neg (\alpha \Longrightarrow)) \alpha)$ but $\Sigma \vdash \psi$ so by Modus Ponens $\Sigma \vdash (\neg (\alpha \Longrightarrow)) \alpha)$

The above result is a contradiction because $\Sigma$ is maximally consistent so by @def-formulas-maximally-consistent it must by consistent. Therefore by @nte-proof-by-reductio-ad-absurdum is must be the case that @prp-belongs-maximally-consistent is true.

:::

::: {#prp-consistent-negation}

-  If $\Sigma$ is maximally consistent and $(\neg \psi) \in \Sigma$ then $\psi \not \in \Sigma$.

-  If $\Sigma$ is maximally consistent and $\psi \not \in \Sigma$ then $(\neg \psi) \in \Sigma$.

:::

::: {.proof}

-  Using @nte-proof-by-reductio-ad-absurdum assume that $\Sigma$ is maximally consistent, $(\neg \psi) \in \Sigma$ and $\psi \in \Sigma$

   -  Therefore $\Sigma \vdash (\neg \psi)$, $\Sigma \vdash \psi$ and by @exr-application-deduction-theorem 1 $\Sigma \vdash (\neg (\alpha \Longrightarrow \alpha))$.
   
   -  However this is a contradiction because$\Sigma$ is consistent by @def-formulas-maximally-consistent. Therefore \Sigma$ is maximally consistent and $(\neg \psi) \in \Sigma$ then $\psi \not \in \Sigma$ must be true.
   
-  Assume $\Sigma$ is maximally consistent and $\psi \not \in \Sigma$:

   -  By @def-formulas-maximally-consistent $\Sigma \cup \{ \psi \} \vdash (\neg (\alpha \Longrightarrow))$.
   
   -  By @thm-deduction-theorem $\Sigma \vdash (\psi \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$. Therefore:
   
      1. $(\psi \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$ Premiss
      
      2. $((\psi \Longrightarrow (\neg (\alpha \Longrightarrow \alpha))) \Longrightarrow ((\alpha \Longrightarrow \alpha) \Longrightarrow (\neg \psi)))$ @exr-application-deduction-theorem 5
      
      3.  $((\alpha \Longrightarrow \alpha) \Longrightarrow (\neg \psi))$ Modus Ponens 2, 1
      
      4.  $(\alpha \Longrightarrow \alpha)$ @exm-example-proof-1
      
      5.  $(\neg \psi)$ Modus Ponens 3, 4
      
   -  Therefore $\Sigma \vdash (\neg \psi)$ and by @prp-belongs-maximally-consistent $(\neg \psi) \in \Sigma$.
   
Using similar arguments we can prove that:

-  If $\Sigma$ is maximally consistent and $\beta \in \Sigma$ then $(\neg \beta) \not \in \Sigma$.

-  If $\Sigma$ is maximally consistent and $(\neg \beta) \not \in \Sigma$ then $\beta \in \Sigma$.
      
:::

::: {#prp-maximally-consistent-implies}

Suppose $\Sigma$ is a maximally consistent set of formulas and $\varphi$ and $\psi$ are formulas. Then $(\varphi \Longrightarrow \psi) \in \Sigma$ if and only if $\varphi \not \in \Sigma$ or $\psi \in \Sigma$.

:::

::: {.proof}

-  By @exr-application-deduction-theorem 16[^chapter_1-7] and @nte-proof-by-reductio-ad-absurdum assume $\Sigma$ is maximally consistent, $(\varphi \Longrightarrow \psi) \in \Sigma$, $\varphi \in \Sigma$ and $\psi \not \in \Sigma$. Therefore:

   -  Because $\Sigma \vdash (\varphi \Longrightarrow \psi)$ and $\Sigma \vdash \varphi$ then $\Sigma \vdash \psi$ by Modus Ponens.
   
   -  Because $\psi \not \in \Sigma$ by @prp-consistent-negation $(\neg \psi) \in \Sigma$ so $\Sigma \vdash (\neg \psi)$.
   
   -  Because $\Sigma \vdash \psi$ and $\Sigma \vdash (\neg \psi)$ by @exr-application-deduction-theorem 5 $\Sigma \vdash (\neg (\alpha \Longrightarrow) \alpha)$.
   
   -  However the above result is a contradiction because $\Sigma$ is maximally consistent so it must be consistent by @def-formulas-maximally-consistent. 
   
   -  Therefore if $\Sigma$ is a maximally consistent and $(\varphi \Longrightarrow \psi) \in \Sigma$ then $\varphi \not \in \Sigma$ or $\psi \in \Sigma$ must be true.
   
-  Assume $\Sigma$ is a maximally consistent and $\varphi \not \in \Sigma$ or $\psi \in \Sigma$.

   -  If $\Sigma$ is a maximally consistent and $\varphi \not \in \Sigma$ then $(\neg \varphi) \in \Sigma$ by @prp-consistent-negation so $\Sigma \vdash (\neg \varphi)$. Therefore:  
      
       1.  $(\neg \varphi)$ Premiss
       
       2.  $((\neg \varphi) \Longrightarrow ((\neg \psi) \Longrightarrow (\neg \varphi)))$ Axiom 1
       
       3.  $((\neg \psi) \Longrightarrow (\neg \varphi))$ Modus Ponens 2, 1
       
       4.  $(\varphi \Longrightarrow \psi)$ @exr-application-deduction-theorem 3
       
   -  If $\Sigma$ is a maximally consistent and $\psi \in \Sigma$ then $\Sigma \vdash \psi$. Therefore:  
      
       1.  $\psi$ Premiss
       
       2.  $(\psi \Longrightarrow (\varphi \Longrightarrow \psi))$ Axiom 1
       
       3.  $(\varphi \Longrightarrow \psi)$ Modus Ponens 2, 1

   -  In any case because $\Sigma \vdash (\varphi \Longrightarrow \psi)$ by @prp-belongs-maximally-consistent $(\varphi \Longrightarrow \psi) \in \Sigma$.

:::

[^chapter_1-7]: By @exr-application-deduction-theorem 16 $(\neg (\alpha \lor \beta)) \vdash ((\neg \alpha) \land (\neg \beta))$. Also using a truth table is possible to show that $(\neg (\alpha \lor \beta)) \models ((\neg \alpha) \land (\neg \beta))$.

::: {#thm-expand-to-maximally-consistent}

Suppose $\Gamma$ is a consistent set of formulas. Then
there is a maximally consistent set of formulas $\Sigma$ such that $\Gamma \subseteq \Sigma$.

:::

::: {.proof}

If $\gamma \not \in \Gamma$ and $\Gamma \cup \{ \gamma \}$ be inconsistent then $\Gamma = \Sigma$.

Otherwise, assume $\gamma \not \in \Gamma$ and $\Gamma \cup \{ \gamma \}$ be inconsistent. Therefore:

-  By @exr-formulas-countable-lp let $\psi_1, \psi_2,  \ldots, \psi_n, \ldots$ the formulas of $\mathcal{L}_p$.

-  Let $\Delta_1 = \Gamma$ and $\Delta_{k+1}$ [@fagin_reasoning_1995, p. 55, Lemma 3.1.2]:

$$\Delta_{k+1} = \begin{cases}
                  \Delta_k \cup \{ \psi_k \} & \text{if is consistent} \\
                  \Delta_k & \text{if is inconsistent}
                  \end{cases}$$

-  Let $\Lambda = \bigcup_{k \in \mathbb{N}} \Delta_k$ then $\Lambda$ is maximally consistent because:

   -  Because every finite subset of $\Lambda$ is contained in some $\Delta_k$ for some $k$ and each $\Delta_k$ is consistent by @cor-inconsistent-formulas-subset $\Lambda$ is consistent.
   
   -  Let $\beta \not \in \Lambda$ then there is some $\psi_i$ such that $\beta = \psi_i$ and $\Delta_{i+1} = \Delta_i \cup \{ \psi_i \}$ is inconsistent. Because $\Delta_{i+1}$ is a finite subset of $\Lambda$ by @prp-inconsisten-formulas-subset $\Lambda \cup \{ \beta \}$ is inconsistent. 

:::

::: {#thm-consistent-satisfiable-equivalence}

A set of formulas is consistent if and only if it is
satisfiable.

:::

::: {.proof}

-  If a set of formulas $\Gamma$ is consistent then by @thm-expand-to-maximally-consistent there is maximally  consistent set of formulas $\Sigma$ such that $\Gamma \subseteq \Sigma$. Therefore:

   -  Lets define a truth assignment $v$ such that $v(A_i) = T$ if and only if $A_i \in \Sigma$ [@bilaniuk_problem_2009, p. 20]. Also by @exr-application-deduction-theorem 12 and because $\{ (\alpha \iff \beta) \} \models ((\neg \beta) \iff (\neg \alpha))$ we have that $v(A_i) = T$ if and only if $A_i \in \Sigma$ is equivalent to $v(A_i) = F$ if and only if $A_i \not \in \Sigma$.
   
      -  By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in $\varphi$:
      
         -  *Base step* $(n = 0)$: Because $\varphi$ has no connectives then by @def-formulas-lp $\varphi$ is an atomic formula. Therefore by the assumption made $v(\varphi) = T$ if and only if $\varphi \in \Sigma$.
         
         -  *Induction hypothesis* $(n \leq k)$: Assume that if $\varphi$ is a formula with $n \leq k$ connectives then $v(\varphi) = T$ if and only if $\varphi \in \Sigma$.

         -  *Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:
         
            -   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives. By the *induction hypothesis* $v(\alpha) = T$ if and only if $\alpha \in \Sigma$:
            
                1. $v((\neg \alpha)) = F$ @def-truth-assignment
                
                2. $v(\alpha) = T$ @def-truth-assignment or @thm-soundness-theorem (for $\iff$ to apply) 
                   
                3. $\alpha \in \Sigma$ *Induction hypothesis* or @prp-consistent-negation (for $\iff$ to apply)
    
                4. $(\neg \alpha) \not \in \Sigma$ @prp-consistent-negation 

            -   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each. By the *induction hypothesis* $v(\beta) = T$ if and only if $\beta \in \Sigma$ and $v(\gamma) = T$ if and only if $\gamma \in \Sigma$:
            
                1. $v((\beta \Longrightarrow \gamma)) = T$ @def-truth-assignment 
                
                2. $v(\beta) = F$ or $v(\gamma) = T$ @def-truth-assignment or *induction hypothesis* (for $\iff$ to apply)
                
                3. $\beta \not \in \Sigma$ and $\gamma \in \Sigma$ *induction hypothesis* or @prp-maximally-consistent-implies (for $\iff$ to apply)
                
                4. $(\beta \Longrightarrow \gamma) \in \Sigma$ @prp-maximally-consistent-implies

            -   In any case $v(\varphi) = T$ if and only if $\varphi \in \Sigma$.

   -  Because for all $\gamma \in \Gamma$ then $\gamma \in \Sigma$ by the above result $v(\gamma) = T$ for all $\gamma \in \Gamma$. Therefore $\Gamma$ is satisfiable.   
                
-  If a set of formulas $\Gamma$ is satisfiable then by @prp-satisfiable-consistent-formula $\Gamma$ is consistent.

:::

::: {#thm-completeness-theorem}

## Completeness Theorem

If $\Delta$ is a set of formulas and $\alpha$ is a formula such that $\Delta \models \alpha$, then $\Delta \vdash \alpha$.

:::

::: {.proof}

If $\Delta \models \alpha$ then by @def-formulas-lp $\Delta \cup \{ (\neg \alpha) \}$ is not satisfiable because there is no truth assignment $v$ such that $v(\alpha) = T$ and $v((\neg \alpha)) = T$.

If $\Delta \cup \{ (\neg \alpha) \}$ is not satisfiable by @thm-consistent-satisfiable-equivalence, @exr-application-deduction-theorem 12 and because $\{ (\alpha \iff \beta) \} \models ((\neg \beta) \iff (\neg \alpha))$ we have that $\Delta \cup \{ (\neg \alpha) \}$ is inconsistent, $\Delta \cup \{ (\neg \alpha) \} \vdash (\neg (\alpha \Longrightarrow \alpha))$. 

By @thm-deduction-theorem $\Delta \vdash ((\neg \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$ Therefore:

1.  $((\neg \alpha) \Longrightarrow (\neg (\alpha \Longrightarrow \alpha)))$ Premiss  

2.  $((\alpha \Longrightarrow \alpha) \Longrightarrow \alpha)$ @exr-application-deduction-theorem 3

3.  $(\alpha \Longrightarrow \alpha)$ @exm-example-proof-1

4.  $\alpha$ Modus Ponens 2, 3

The above result means that $\Delta \vdash \alpha$.

:::

::: {#nte-completness-plain-english .callout-note}

-   Completeness guarantees that if something is actually true, then you can deduce or prove it using the rules of the logical system.

    -   In the case of $\mathcal{L}_p$ the rules are described in @def-axioms-lp, @def-modus-ponens and @def-deduction-or-proof.

:::

::: {#thm-compactness-theorem}

## Compactness Theorem

A set of formulas $\Gamma$ is satisfiable if and only if every finite subset of $\Gamma$ is satisfiable.

:::

::: {.proof}

By @thm-consistent-satisfiable-equivalence $\Gamma$ is satisfiable if and only if $\Gamma$ is consistent.

By @cor-inconsistent-formulas-subset $\Gamma$ is consistent if and only if every finite subset of $\Gamma$ is consistent. 

By @thm-consistent-satisfiable-equivalence every finite subset of $\Gamma$ is consistent if and only if every finite subset of $\Gamma$ is satisfiable.

Therefore by the above results $\Gamma$ is satisfiable if and only if every finite subset of $\Gamma$ is satisfiable.
:::

## First order logic



## Sets

This section is a treatment of axiomatic set theory from the naive point of view as described in [@halmos_naive_2017]:

-  It is axiomatic in that some axioms for set theory
are stated and used as the basis of all subsequent proofs [@halmos_naive_2017, p. v]. For an axiomatic approach see **Appendix E**.

-  It is naive in that the language and notation are those of ordinary informal (but formalizable) mathematics [@halmos_naive_2017, p. v]

One thing that the development will not include is a definition of sets. The naive point of view adopted assumes that the reader has the ordinary, human, intuitive (and frequently erroneous) understanding of what sets are. The purpose of the exposition is to delineate some of the many things that one can correctly do with them [@halmos_naive_2017, p. 1].

### The axiom of extensionality

Sets, as they are usually conceived, have *elements* or *members*. It is important to know that a set itself may also be an element of some other set.

The principal concept of set theory, the one that in completely axiomatic studies is the principal primitive (undefined) concept, is that of *belonging*. If $x$ belongs to $A$, $x$ is an element of $A$, we shall write $x \in A$. Also if $x$ is not an element of $A$ we shall write $x \not \in A$, $(\neg (x \in A))$.

A possible relation between sets, more elementary than belonging, is equality. The equality of two sets $A$ and $B$ is written as $A = B$. Also if $A$ and $B$ are not equal is denoted as $A \neq B$, $(\neg (A = B))$.

::: {#def-axiom-of-extension}

## Axiom of extensionality

Two sets are equal if and only if they have the same
elements.

$$A = B \iff (\forall x)(x \in A \iff x \in B)$$

The axiom expresses the basic idea that a set is determined by its elements:

-  If $A$ and $B$ are equal then they have the same elements.

-  If $A$ and $B$ have the same elements then they are equal.

:::

If $A$ and $B$ are sets then $A$ is *included* in $B$ or $A$ is a *subset* of $B$ if every element of $A$ is an element of $B$. If this is the case this situation is denoted as $A \subseteq B$. Thus:

$$A \subseteq B \iff (\forall x)(x \in A \Longrightarrow x \in B)$$

Because $A = A$ then $A \subseteq A$. Any subset of $A$ which is from $A$ is called a *proper subset* of $A$. To denote that $C$ is a proper subset of $A$ we use the notation $C \subset A$. Thus:

$$C \subset A \iff (C \subseteq A \land C \neq A)$$

If $A \subseteq B$ and $B \subseteq C$ then $A$ and $B$ have the same elements so by @def-axiom-of-extension $A = B$. Thus:

$$A = B \iff (A \subseteq B \land B \subseteq A)$$

### Axiom schema of specification (or separation)

All the basic principles of set theory, except only @def-axiom-of-extension are designed to make new sets out of old ones. The first and most important of these basic principles is the axiom of secham of specification.

Let $A$ be the set of all men. The sentence $x$ *is married* is true for some of the elements $x \in A$ and false for others. The principle we are illustrating is the one that justifies the passage from the given set $A$ to the subset (namely, the set of all married men) specified by the given sentence [@halmos_naive_2017, p. 4].

To indicate the generation of the subset, it is usually denoted by: 

$$\{ x \in A \mid x \text{ is married} \}$$

::: {#def-axiom-schema-of-specification}

## Axiom schema of specification

If $P$ is a property then for every set $A$ there exist a set $B = \{ x \in A \mid P(x) \}$ that contains all those $x \in A$ that have the property $P$.

-  Observe that $B \subseteq A$ and that if $A$ exists then $B = \{ x \in A \mid P(x) \}$ exists 

:::

Lets see an amusing application of @def-axiom-schema-of-specification [@halmos_naive_2017, p. 6]. Consider $P(x)$ as $(\neg (x \in x))$ or more compact $x \not \in x$. Therefore if $A$ is a set and $B = \{ x \in A \mid x \not \in x \}$ then:

$$y \in B \iff (y \in A \land y \not \in y)$$ {#eq-application-axiom-schema-of-specification}

Can it be that $B \in A$? Because $B \subseteq A$ then if $B \in A$ we have that $B \in B$ or $B \not \in A$ but not both:

-  If $B \in B$ by  @eq-application-axiom-schema-of-specification $B \in A \land B \not \in B$ but this is a contradiction because $(B \in B) \land (B \not \in B)$

-  If $B \not \in B$ and because $B \in A$ then again by @eq-application-axiom-schema-of-specification $B \in B$. However this is again a contradiction because $(B \in B) \land (B \not \in B)$

Because $B \in A$ generates a contradiction by @nte-proof-by-reductio-ad-absurdum it must be the case that $B \not \in A$. In simple words *nothing contains everything* or *there is no universe* [@halmos_naive_2017, pp. 6-7]. In older approaches to set theory, the existence of a universe was taken for granted, and the argument in the preceding paragraph was known as the *Russell paradox* [@halmos_naive_2017, p. 7].

Let as assume that *there exists a set*. Later on we shall formulate a deeper and more useful existential assumption, this assumption plays a temporary role only [@halmos_naive_2017, p. 8]. One consequence of this assumption is that there exists a set without any elements at all. By @def-axiom-schema-of-specification define $B$ using some false $P(x)$ like $x \not = x$:

$$B = \{ x \in A \mid x \not = x \}$$
Furthermore by @def-axiom-of-extension $B$ is unique. This is because $(\forall x)(x \not \in B)$ so if there is another $B^*$ such that $(\forall x)(x \not \in B^*)$ then we have that:

-  $(\forall x)(x \in B \Longrightarrow x \in B^*)$ is true because $x \in B$ is false so $B \subseteq B^*$

-  $(\forall x)(x \in B^* \Longrightarrow x \in B)$ is true because $x \in B^*$ is false so $B^* \subseteq B$

Therefore $B = B^*$. Because $B$ is unique we will use the symbol $\emptyset$ for this set. Also we know that $\emptyset \subseteq \emptyset$ but also we have that $\emptyset \subseteq A$ for any set $A$. How could it be that the empty set is a subset of every set? To prove that something is true about the empty set, prove that it cannot be false [@halmos_naive_2017, p. 8]. Assume $\emptyset \not \subseteq A$ for any set $A$. But this will mean that there is some $x$ such that $x \in \emptyset \land x \not \in A$. However this is not possible because $(\forall x)(x \not \in \emptyset)$. Therefore by @nte-proof-by-reductio-ad-absurdum it must be the case that $(\forall A)(\emptyset \subseteq A)$.

### Axiom of pairing

The pairing axiom states that whenever we have two sets $a$ and $b$, there is a set $A$ whose only members are $a$ and $b$.

::: {#def-axiom-of-pairing}

## Axiom of pairing

If $a$ and $b$ are sets there is a set $A$ such that it contains exactly $a$ and $b$.

:::

By @def-axiom-schema-of-specification we can specify $P(x)$ as $x = a \lor x = b$ and build $A$ as:

$$A = \{ x \in C \mid x = a \lor x = b \}$$

If there is another set $B$ such that $\{ x \in C \mid x = a \lor x = b \}$ then by @def-axiom-of-extension $A = B$ so we can denote $A$ as $\{ a, b\}$. In case $a = b$ we have that $\{ a, a \}$ but we can simply write $\{ a\}$ because $\{ a, a \} \subseteq \{ a \}$ and $\{ a \} \subseteq \{ a, a \}$ so $\{ a, a \} = \{ a \}$. Also $a \in A$ is equivalent to $\{ a \} \subseteq A$ but be careful because $a \not = \{ a \}$. 

Furthermore because $\emptyset$ exists we can build new sets:

$$\{ \emptyset \}, \{ \{ \emptyset \} \}, \{ \{ \{ \emptyset \} \} \}, \ldots$$

Or pairs of them like $\{ \emptyset, \{ \emptyset \} \}$, $\{ \{ \emptyset \}, \{ \{ \emptyset \} \} \}$. But we can still apply the same logic by creating new sets from the above sets like $\{ \emptyset, \{ \emptyset, \{ \emptyset \} \} \}$.  

Because $\{ a, b \} = \{ b, a \}$ and using the above logic we can use those aspects to motive the definition of ordered pair as:

$$(a, b) = \{ \{ a \}, \{ a, b\} \}$$
Where we can use it to define recursively an $n$-tuple for $n \geq 3$ as:

$$\begin{split}
 (a_1, a_2, a_3) & = ((a_1, a_2), a_3) \\
 (a_1, a_2, a_3, a_4) & = ((a_1, a_2, a_3), a_4) \\
 & \;\; \vdots \\
 (a_1, \ldots , a_n) & = ((a_1, \ldots, a_{n-1}), a_n)
\end{split}$$

$(a, b) = \{ \{ a \}, \{ a, b\} \}$ is defined an ordered pair because $(a, b) = (a^{'}, b^{'})$ if and only if $a = a^{'} \land b = b^{'}$. Why?

::: {.proof}

-  If $a = a^{'} \land b = b^{'}$ then $(a, b) = \{ \{ a^{'} \}, \{ b^{'}, a^{'}\} \}$. But $(a^{'}, b^{'}) = \{ \{ a^{'} \}, \{ a^{'}, b^{'}\} \}$ so $(a, b) = (a^{'}, b^{'})$.

-  If $(a, b) = (a^{'}, b^{'})$ lets assume 2 cases [@forero_cuervo_matematica_2009, p. 59]:

   -  Assume $a^{'} = b^{'}$ then $(a^{'}, b^{'}) = \{ \{ a^{'} \}, \{ a^{'}, a^{'}\} \} = \{ \{ a^{'} \}, \{ a^{'} \} \} = \{ \{ a^{'} \} \}$. Because $(a^{'}, b^{'}) = (a, b)$ then $\{ \{ a^{'} \} \} = \{ \{ a \}, \{ b, a \} \}$. Therefore $b = a$ and $\{ \{ a \} \}$ so $a^{'} = a$. In particular $a = a^{'} \land b = b^{'}$.
   
   -  Assume $a^{'} \neq b^{'}$ then because $(a, b) = (a^{'}, b^{'})$ we have that $\{ \{ a \}, \{ a, b \} \} = \{ \{ a^{'} \}, \{ a^{'}, b^{'}\} \}$. Also $a \neq b$ because $a^{'} \neq b^{'}$. Therefore $a = a^{'}$ and $\{ a, b \} = \{ a^{'}, b^{'}\}$. But again $a^{'} \neq b^{'}$ so $b = b^{'}$. We have that $a = a^{'} \land b = b^{'}$. 

:::

## Axiom of union

If $A$ and $B$ are sets, it is sometimes natural to wish to unite their elements into one comprehensive set [@halmos_naive_2017, p. 12].

::: {#def-axiom-of-union}

## Axiom of union

For any set $A$ there exist a set $B = \bigcup A$, the union of all elements of $A$.

In other words $\bigcup A = \{ x \in C \mid \exists C\in A \}$ or that $x \in \bigcup A$ if and only if $(\exists C \in A)(x \in C)$.

:::

For example let $A = \{ \{ a, b\}, \{ c \} \}$ then $\bigcup A = \{ a, b, c \}$. Also if $A$ and $B$ are sets using @def-axiom-of-pairing we can generate the set $\{ A, B \}$ and apply @def-axiom-of-union to obtain:

$$\begin{split}
   \bigcup \{ A, B \} & = \{ x \in C \mid C = A \lor C = B \} \\
   & = A \cup B
  \end{split}$$
 
Also let $B = \{ A \}$ then $\bigcup B = \{ x \in A \mid A \in B \} = A$. What about $\bigcup \emptyset$? Well, $\bigcup \emptyset = \{ x \in A \mid A \in \emptyset \}$. But there is no $A \in \emptyset$ so there is not $x \in \bigcup \emptyset$. Therefore $\bigcup \emptyset = \emptyset$.

We can check the following facts:

-  $A \cup \emptyset = A$

$$\begin{split}
   x \in A \cup \emptyset & \iff x \in A \lor x \in \emptyset \\
   & \iff x \in A
  \end{split}$$

-  $A \cup B = B \cup A$

$$\begin{split}
   x \in A \cup B & \iff x \in A \lor x \in B \\
   & \iff x \in B \lor x \in A \\
   & \iff x \in B \cup A
  \end{split}$$

-  $A \cup A = A$

$$\begin{split}
   x \in A \cup A & \iff x \in A \lor x \in A \\
   & \iff x \in A
  \end{split}$$
  
-  $A \subseteq B$ if and only if $A \cup B = B$

   -  Let $A \subseteq B$
   
      $$\begin{split}
       x \in A \cup B & \iff x \in A \lor x \in B \\
       & \iff x \in B \lor x \in B \\
       & \iff x \in B 
       \end{split}$$

   -  Let $A \cup B = B$

      $$\begin{split}
      x \in A & \Longrightarrow x \in A \lor x \in B \\
      & \Longrightarrow x \in B
      \end{split}$$

What about intersections? By @def-axiom-schema-of-specification we can define $A \cap B = \{ x \in A \mid x \in B \}$ where $P(x) = x \in B$. 

We can check the following facts:

-  $A \cap \emptyset = \emptyset$

   -  Because $A \cap \emptyset = \{ x \in A \mid x \in \emptyset \}$ but there is no $x \in \emptyset$ so there is no $x \in A \cap \emptyset$. Therefore $A \cap \emptyset = \emptyset$.
   
-  $A \cap B = B \cap A$

$$\begin{split}
   x \in A \cap B & \iff x \in A \land x \in B \\
   & \iff x \in B \land x \in A \\
   & \iff x \in B \cap A
  \end{split}$$
  
-  $A \cap A = A$

$$\begin{split}
   x \in A \cap A & \iff x \in A \land x \in A \\
   & \iff x \in A
  \end{split}$$

-  $A \subseteq B$ if and only if $A \cap B = A$

   -  Let $A \subseteq B$
   
      $$\begin{split}
       x \in A \cap B & \iff x \in A \land x \in B \\
       & \iff x \in A \land x \in A \\
       & \iff x \in A 
       \end{split}$$

   -  Let $A \cap B = A$

      $$\begin{split}
      x \in A & \Longrightarrow x \in A \land x \in B \\
      & \Longrightarrow x \in A
      \end{split}$$

Pairs of sets with an empty intersection occur frequently enough to justify the use of a special word. If $A \cap B = \emptyset$, the sets $A$ and $B$ are called *disjoint*. Also if in a collection of sets any two distinct sets of the collection are disjoint we may speak in such a situation of a *pairwise disjoint* collection [@halmos_naive_2017, p. 15].

Let $B = \{ A_i \in C \mid A_i \in A \}$ then $B$ is *pairwise disjoint* if $i \neq j$ then $A_i \cap A_j = \emptyset$.

We can define $\bigcap B = \{ x \in A_i \mid \forall A_i \in B \}$. Once we define $\bigcap B$ we can have that $\bigcap B = \emptyset$ but $B$ is not necessary *pairwise disjoint*. For example let $B = \{ \{ a, b \}, \{ b, c \}, \{ a, c \} \}$ where we have that:

-  $\{ a, b \} \cap \{ b, c \} = b$
-  $\{ b, c \} \cap \{ a, c \} = c$
-  $\{ a, b \} \cap \{ a, c \} = a$
-  $\{ a, b \} \cap \{ b, c \} \cap \{ a, c \} = \emptyset$

Therefore if a $B$ is a *pairwise disjoint* collections of sets it is *disjoint* but if $B$ is a *disjoint* collections of sets it is not necessary true that is *pairwise disjoint*.

**Pending**: Include distributive laws identities [@halmos_naive_2017, p. 15] and solve the last exercise.