```{r}
#| label: libraries

library(kableExtra)
library(tidyverse)
```

# Basic Facts and Notions of Logic and Set Theory

This chapter introduces the concepts and terminology of logic and set theory.

What sets aside mathematics from other disciplines is its reliance on proof [@bilaniuk_problem_2009, p. ix]. But what is a proof? In an informal way a proof is any reasoned argument accepted as such by other mathematicians [@bilaniuk_problem_2009, p. ix].

In that sense mathematical logic is concerned with formalizing and analyzing the kinds of reasoning used in the rest of mathematics [@bilaniuk_problem_2009, p. ix].

## Propositional logic

Propositional logic attempts to make precise the relationships that certain connectives like *not*, *and*, *or*, and *if ... then* [@bilaniuk_problem_2009, p. x].

### Language

First we will define the formal language of propositional logic, $\mathcal{L}_P$, by specifying the symbols and formulas

::: {#def-symbols-lp}
## Symbols of $\mathcal{L}_P$

The symbols of $\mathcal{L}_P$ are:

-   Parentheses: $($ and $)$
-   Connectives: $\neg$ and $\Longrightarrow$
-   Atomic formulas: $A_0, A_1, A_2, \ldots, A_n, \ldots$
:::

Then we specify the ways in which the symbols of $\mathcal{L}_P$ can be put together.

::: {#def-formulas-lp}
## Formulas of $\mathcal{L}_P$

The formulas of $\mathcal{L}_P$ are those finite sequences or strings of the symbols given in @def-symbols-lp which satisfy the following rules:

-   Every atomic formula is a formula
-   If $\alpha$ is a formula, then $(\neg \alpha)$ is a formula
-   If $\alpha$ and $\beta$ are formulas, then $(\alpha \Longrightarrow \beta)$ is a formula
-   No other sequence of symbols is a formula
:::

In @def-symbols-lp and @def-formulas-lp parentheses are just punctuation where their purpose is to group other symbols together, $\neg$ and $\Longrightarrow$ represent the connectives *not* and *if ... then* and the atomic formulas represent statements that cannot be broken down any further using our connectives. Finally we specify that a well formed formula can only be obtained by the first 3 rules pointed out in @def-formulas-lp[^chapter_1-1].

[^chapter_1-1]: See [@church_introduction_1996, p. 70] for more details.

::: {#exr-parentheses}
Show that every formula of $\mathcal{L}_P$ has the same number of left parentheses as it has of right parentheses.
:::

::: {#sol-parentheses}
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no parentheses is has the same left as right parentheses.

*Induction hypothesis* $(n \leq k)$: Assume a formula with $n \leq k$ connectives has the same left as right parentheses.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* $\alpha$ has the same left as right parentheses so $(\neg \alpha)$ also have the same left as right parentheses.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* $\beta$ and $\gamma$ have the same left as right parentheses so $(\beta \Longrightarrow \gamma)$ also has the same left as right parentheses.
:::

::: {#exr-length-parentheses}
Suppose $\alpha$ is any formula of $\mathcal{L}_P$. Let $l(\alpha)$ be the length of $\alpha$ as a sequence of symbols and let $p(\alpha)$ be the number of parentheses (counting both left and right parentheses) in $\alpha$. What are the minimum and maximum values of $\frac{p(\alpha)}{l(\alpha)}$?
:::

::: {#sol-length-parentheses}
The minimum value of $p(\alpha)$ is $0$ when $\alpha$ is an atomic formula. Therefore the minimum value of $\frac{p(\alpha)}{l(\alpha)}$ is $0$ because $p(\alpha) \geq 0$ and $l(\alpha) \geq 1$.

In the case of other values lets inspect the possible values of $p(\alpha)$ and $l(\alpha)$:

-   For $p(\alpha)$ the possible values are $0, 2, 4, \ldots, 2m, \ldots$.

-   For $l(\alpha)$ we can begin with an atomic formula, $A_0$, and then add $3$ or $4$ symbols to create a well formed formula:

    -   $(\neg A_0)$
    -   $(A_0 \Longrightarrow A_1)$

Where the possible values of $l(\alpha)$ are $1, 4, 5, 7, 8, \ldots, s - 1, s, s + 1, \ldots$ as it is shown in @fig-length-formula-lp where the majority of duplicate branches with the same lengths are omitted but can be different in relation to $p(\alpha)$.

```{tikz}
#| label: fig-length-formula-lp
#| fig-cap: Possible values of $l(\alpha)$ and associated $p(\alpha)$ values in parentheses  
#| fig-align: center
#| out-width: 50%

\begin{tikzpicture}[level distance=1.5cm,
  level 1/.style={sibling distance=5cm},
  level 2/.style={sibling distance=4cm},
  level 3/.style={sibling distance=3cm}]
  level 4/.style={sibling distance=2cm}]
  \node {1 (0)}
    child {node {4 (2)}
      child {node {7 (4)}
        child {node {10 (6)}
          child {node {13 (8)}}
          child {node {14 (8)}} 
        } 
        child {node {11 (6)}
          child {node {15 (8)}}
        } 
      } 
      child {node {8 (4)}
        child {node {12 (6)}
          child {node {16 (8)}}        
        } 
      }
    }
    child {node {5 (2)}
      child {node {9 (4)}
        child {node {13 (6)}
          child {node {17 (8)}}        
        }
      }
    };
\end{tikzpicture}
```

Therefore we can examine the leftmost branch.

-   For the lefmost branch we have for $\frac{p(\alpha)}{l(\alpha)} = \frac{0}{1}, \frac{2}{4}, \frac{4}{7}, \frac{6}{10}, \frac{8}{13}, \ldots, \frac{2n}{3n + 1}, \ldots$. Therefore $\lim_{n \to \infty} \frac{2n}{3n + 1} = \lim_{n \to \infty} \frac{2}{3} = \frac{2}{3}$.

Therefore $0 \leq \frac{p(\alpha)}{l(\alpha)}$ and $\frac{p(\alpha)}{l(\alpha)} < \frac{2}{3}$ for the lefmost branch
:::

::: {#exr-atomic-implies}
Suppose $\alpha$ is any formula of $\mathcal{L}_P$. Let $s(\alpha)$ be the number of atomic formulas in $\alpha$ (counting repetitions) and let $c(\alpha)$ be the number of occurrences of $\Longrightarrow$ in $\alpha$. Show that $s(\alpha) = c(\alpha) + 1$.
:::

::: {#sol-atomic-implies}
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no $\Longrightarrow$ then $c(\varphi) = 0$ and $s(\varphi) = 1$ and so $s(\varphi) = c(\varphi) + 1$.

*Induction hypothesis* $(n \leq k)$: Assume that for a formula with $n \leq k$ connectives $s(\varphi) = c(\varphi) + 1$.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* for $\alpha$ we have that $s(\alpha) = c(\alpha) + 1$. Therefore for $(\neg \alpha)$ we have also that $s((\neg \alpha)) = c((\neg \alpha)) + 1$.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* for $\beta$ and $\gamma$ we have that $s(\beta) = c(\beta) + 1$ and $s(\gamma) = c(\gamma) + 1$. Therefore $s((\beta \Longrightarrow \gamma)) = c(\beta) + c(\gamma) + 1 + 1$. But $c(\beta) + c(\gamma) + 1 = c((\beta \Longrightarrow \gamma))$ so $s((\beta \Longrightarrow \gamma)) = c((\beta \Longrightarrow \gamma)) + 1$\
:::

::: {#exr-length-formulas-lp}
What are the possible lengths of formulas of $\mathcal{L}_P$? Prove it.
:::

::: {#sol-length-formulas-lp}
Using @sol-length-parentheses and @fig-length-formula-lp the possible possible lengths of formulas of $\mathcal{L}_P$ are $1, 4, 5, 7, 8, \ldots, s - 1, s, s + 1, \ldots$.
:::

::: {#exr-without-punctuation-lp}
Find a way for doing without parentheses or other punctuation symbols in defining a formal language for $\mathcal{L}_P$.
:::

::: {#sol-without-punctuation-lp}
See [@lukasiewicz_selected_1970, p. 180] which is called Lukasiewicz or Polish notation

In Polish notation, logical operators are placed before their operands. This prefix positioning eliminates the need for parentheses, as the order of operations is strictly determined by the operator sequence.

So using @def-formulas-lp we have that:

-   Every atomic formula is a formula
-   If $\alpha$ is a formula, then $\neg \alpha$ is a formula
-   If $\alpha$ and $\beta$ are formulas, then $\Longrightarrow \alpha \beta$ is a formula
-   No other sequence of symbols is a formula

For example $(((\neg \alpha) \Longrightarrow \beta) \Longrightarrow (\neg \gamma))$ can be written using Polish and modern notation as $\Longrightarrow \Longrightarrow \neg \alpha \beta \neg \gamma$

Also Polish notation is not ambiguous. For example:

-   $((\alpha \Longrightarrow \beta) \Longrightarrow \gamma)$ is written as $\Longrightarrow \Longrightarrow \alpha \beta \gamma$

-   $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ is written as $\Longrightarrow \alpha \Longrightarrow \beta \gamma$
:::

::: {#exr-formulas-countable-lp}
Show that the set of formulas of $\mathcal{L}_P$ is countable.
:::

::: {#sol-formulas-countable-lp}
**Pending**
:::

#### Informal conventions {#sec-informal-conventions}

We will use the symbols $\land$, $\lor$, and $\iff$ to represent *and*, *or* and *if and only if* respectively. Since they are not among the symbols of $\mathcal{L}_P$, we will use them as abbreviations for certain constructions involving only $\neg$ and $\Longrightarrow$. Namely:

-   $(\alpha \land \beta)$ is short for $(\neg(\alpha \Longrightarrow (\neg \beta)))$

-   $(\alpha \lor \beta)$ is short for $(( \neg \alpha) \Longrightarrow \beta)$

-   $(\alpha \iff \beta)$ is short for $((\alpha \Longrightarrow \beta) \land (\beta \Longrightarrow \alpha))$

::: {#def-subformulas-lp}
## Subformulas

Suppose $\varphi$ is a formula of $\mathcal{L}_p$. The set of subformulas of $\varphi$, $S(\varphi)$, is defined as follows:

-   If $\varphi$ is an atomic formula then $S(\varphi) = \{ \varphi \}$

-   If $\varphi$ is $(\neg \alpha)$ then $S(\varphi) = S(\alpha) \cup \{ (\neg \alpha) \}$

-   If $\varphi$ is $(\alpha \Longrightarrow \beta)$ then $S(\varphi) = S(\alpha) \cup S(\beta) \cup \{ (\alpha \Longrightarrow \beta) \}$
:::

::: {#exr-find-subformulas-lp}
Find all the subformulas of each of the following formulas.

-   $(\neg((\neg A_{56}) \Longrightarrow A_{56}))$
-   $(A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))))$
-   $(((\neg A_0) \land (\neg A_1)) \iff (\neg (A_0 \lor A_1)))$
:::

::: {#sol-find-subformulas-lp}
$$\begin{split}
   S((\neg((\neg A_{56}) \Longrightarrow A_{56}))) & = S(((\neg A_{56}) \Longrightarrow A_{56})) \cup \{ (\neg((\neg A_{56}) \Longrightarrow A_{56})) \} \\
    & = \{ A_{56}, (\neg A_{56}), ((\neg A_{56}) \Longrightarrow A_{56}), \\
    & \;\;\;\;\;\; (\neg((\neg A_{56}) \Longrightarrow A_{56})) \}
     \end{split}$$

$$\begin{split}
   S((A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))))) & = S(A_9) \cup S((A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \\ 
    & \;\;\;\; \cup \{ (A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \} \\
    & = \{ A_9, A_8, A_{78}, A_0, (\neg A_0), \\ 
    & \;\;\;\;\;\; (\neg(\neg A_0)), (A_{78} \Longrightarrow (\neg (\neg A_0))), \\
    & \;\;\;\;\;\; (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))), \\
    & \;\;\;\;\;\; (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0))))), \\
    & \;\;\;\;\;\; (A_9 \Longrightarrow (A_8 \Longrightarrow (\neg (A_{78} \Longrightarrow (\neg (\neg A_0)))))) \}
     \end{split}$$

Let $\varphi = (((\neg A_0) \land (\neg A_1)) \Longrightarrow (\neg (A_0 \lor A_1)))$ and $\sigma = ((\neg (A_0 \lor A_1)) \Longrightarrow ((\neg A_0) \land (\neg A_1)))$

$$\begin{split}
   S((((\neg A_0) \land (\neg A_1)) \iff (\neg (A_0 \lor A_1)))) & = S((\varphi \Longrightarrow (\neg \sigma))) \cup \{ (\neg (\varphi \Longrightarrow (\neg \sigma)))\} \\
   & = \{ A_0, A_1, (\neg A_0), (\neg A_1), (\neg (\neg A_1) ), \\
   & \;\;\;\;\;\; (A_0 \lor A_1), ((\neg A_0) \Longrightarrow (\neg (\neg A_1))), \\
   & \;\;\;\;\;\; (\neg (A_0 \lor A_1)), ((\neg A_0) \land (\neg A_1)) \\
   & \;\;\;\;\;\; \sigma, (\neg \sigma), \varphi, \\
   & \;\;\;\;\;\; (\varphi \Longrightarrow (\neg \sigma)), \\
   & \;\;\;\;\;\; (\neg(\varphi \Longrightarrow (\neg \sigma))) \}
     \end{split}$$
:::

#### Unique Readability

To ensure that the formulas of $\mathcal{L}_p$ are unambiguous (can be read in only one way according to the rules given in @def-formulas-lp) one must add to @def-symbols-lp the requirement that all the symbols of $\mathcal{L}_p$ are distinct and that no symbol is a subsequence of any other symbol.

::: {#thm-unique-readability}
## Unique Readability

A formula of $\mathcal{L}_p$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.
:::

::: proof
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\varphi$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\varphi$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. Since an atomic formula has no connectives it can not of the form $(\neg \varphi)$ or $(\alpha \Longrightarrow \beta)$.

*Induction hypothesis* $(n \leq k)$: Assume a formula with $n \leq k$ connectives must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \alpha)$ for some formula $\alpha$ with $k$ connectives.

    -   By the *induction hypothesis* $\alpha$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

        -   Because $\alpha$ satisfy exactly one of the first 3 conditions in @def-formulas-lp then $(\neg \alpha)$ can't be an atomic formula because an atomic formula doesn't have connectives.

        -   Now assume that $(\neg \alpha)$ can be expressed as $(\beta \Longrightarrow \gamma)$. Then $\neg \alpha$ will be equal to $\beta \Longrightarrow \gamma$. However $\alpha$ satisfy exactly one of the first 3 conditions in @def-formulas-lp so it will be impossible that $\neg \alpha$ and $\beta \Longrightarrow \gamma$ are equal.

            -   Therefore $(\neg \alpha)$ satisfy exactly the 2 condition in @def-formulas-lp.

-   $(\beta \Longrightarrow \gamma)$ for some formulas $\beta$ and $\gamma$ with $\leq k$ connectives each.

    -   By the *induction hypothesis* $\beta$ and $\gamma$ must satisfy exactly one of the first 3 conditions in @def-formulas-lp.

        -   Because $\beta$ and $\gamma$ satisfy exactly one of the first 3 conditions in @def-formulas-lp then $(\beta \Longrightarrow \gamma)$ can't be an atomic formula because an atomic formula doesn't have connectives.

        -   Now assume that $(\beta \Longrightarrow \gamma)$ can be expressed as $(\neg \sigma)$. Then $\neg \sigma$ will be equal to $\beta \Longrightarrow \gamma$. However $\beta$ and $\gamma$ satisfy exactly one of the first 3 conditions in @def-formulas-lp so it will be impossible that $\neg \sigma$ and $\beta \Longrightarrow \gamma$ are equal.

            -   Therefore $(\beta \Longrightarrow \gamma)$ satisfy exactly the 3 condition in @def-formulas-lp.
:::

### Truth Assignments

Whether a given formula $\varphi$ of $\mathcal{L}_p$ is true or false usually depends on how we interpret the atomic formulas which appear in $\varphi$ [@bilaniuk_problem_2009, p. 7].

::: {#def-truth-assignment}
## Truth assignment

A truth assignment is a function $v$ whose domain is the set of all formulas of $\mathcal{L}_p$ and whose range is the set $\{ T, F \}$ of truth values, such that:

-   $v(A_n)$ is defined for every atomic formula $A_n$.

-   For any formula $\alpha$:

$$v((\neg \alpha)) = \begin{cases}
                     T & \text{ if } v(\alpha) = F \\
                     F & \text{ if } v(\alpha) = T 
                     \end{cases}$$

-   For any formulas $\alpha$ and $\beta$:

$$v((\alpha \Longrightarrow \beta)) = \begin{cases}
                     F & \text{ if } v(\alpha) = T \text{ and } v(\beta) = F \\
                     T & \text{ otherwise }
                     \end{cases}$$
:::

For example, let $v(A_0) = T$ and $v(A_1) = F$ then it is possible to determine $v(((\neg A_1) \Longrightarrow (A_0 \Longrightarrow A_1)))$ in the following way:

-   $v((\neg A_1)) = T$
-   $v((A_0 \Longrightarrow A_1)) = F$
-   $v(((\neg A_1) \Longrightarrow (A_0 \Longrightarrow A_1))) = F$

A convenient way to write out the determination of the truth value of a formula on a given truth assignment is to use a *truth table*:

```{r}
#| results: asis
#| label: tbl-true-table-example
#| tbl-cap: True table example

# See https://stackoverflow.com/questions/76025169/latex-equations-in-tables-with-quarto-revealjs to create a table

true_table_example <- tibble(
 `$A_0$` = c("$T$"), 
 `$A_1$` = c("$F$"),
 `$(\\neg A_1)$` = c("$T$"),
 `$(A_0 \\Longrightarrow A_1)$` = c("$F$"),
 `$((\\neg A_1) \\Longrightarrow (A_0 \\Longrightarrow A_1))$` = c("$T$")
)

kbl(true_table_example, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

Using what is described in @sec-informal-conventions we have the following:

$$v((\alpha \land \beta)) = \begin{cases}
                     T & \text{ if } v(\alpha) = T \text{ and } v(\beta) = T \\
                     F & \text{ otherwise }
                     \end{cases}$$

$$v((\alpha \lor \beta)) = \begin{cases}
                     F & \text{ if } v(\alpha) = F \text{ and } v(\beta) = F \\
                     T & \text{ otherwise }
                     \end{cases}$$

$$v((\alpha \iff \beta)) = \begin{cases}
                     T & \text{ if } v(\alpha) = v(\beta) \\
                     F & \text{ otherwise }
                     \end{cases}$$

Also it is important to point out that in @def-truth-assignment $v((\alpha \Longrightarrow \beta))$ is known as *material implication* [@egre_logic_2021]. In a 2-valued propositional framework there are 16 possible truth tables for 2 formulas $\alpha$ and $\beta$ as it is shown in @tbl-true-1-4, @tbl-true-5-8, @tbl-true-9-12 and @tbl-true-13-16

```{r}
#| results: asis
#| label: tbl-true-1-4
#| tbl-cap: Truth tables contradiction, tautology, $\alpha$ and $\beta$

true_table_1_4 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\bot$` = c("$F$", "$F$", "$F$", "$F$"),
 `$\\top$` = c("$T$", "$T$", "$T$", "$T$"),
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"),
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 .name_repair = "minimal"
)

kbl(true_table_1_4, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-5-8
#| tbl-cap: Truth tables $\neg \alpha$, $\neg \beta$, NOR and NAND

true_table_5_8 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\neg \\alpha$` = c("$F$", "$F$", "$T$", "$T$"),
 `$\\neg \\beta$` = c("$F$", "$T$", "$F$", "$T$"),
 `$\\Downarrow$` = c("$F$", "$F$", "$F$", "$T$"),
 `$\\Uparrow$` = c("$F$", "$T$", "$T$", "$T$")
)

kbl(true_table_5_8, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-9-12
#| tbl-cap: Truth tables AND, OR, material implication (IMPLY) and biconditional (XNOR)

true_table_9_12 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\land$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\lor$` = c("$T$", "$T$", "$T$", "$F$"),
 `$\\Longrightarrow$` = c("$T$", "$F$", "$T$", "$T$"),
 `$\\iff$` = c("$T$", "$F$", "$F$", "$T$")
)

kbl(true_table_9_12, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-true-13-16
#| tbl-cap: Truth tables converse implication, material nonimplication (NIMPLY), converse material nonimplication and XOR

true_table_13_16 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\Longleftarrow$` = c("$T$", "$T$", "$F$", "$T$"),
 `$\\not\\Longrightarrow$` = c("$F$", "$T$", "$F$", "$F$"),
 `$\\not\\Longleftarrow$` = c("$F$", "$F$", "$T$", "$F$"),
 `$\\oplus$` = c("$F$", "$T$", "$T$", "$F$")
)

kbl(true_table_13_16, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

Assuming that we want:

-   $v(\alpha) = T$, $v(\beta) = T$ and $v((\alpha \Longrightarrow \beta)) = T$

-   $v(\alpha) = T$, $v(\beta) = F$ and $v((\alpha \Longrightarrow \beta)) = F$

From the 16 possible truth tables only 4 comply with these both conditions:

```{r}
#| results: asis
#| label: tbl-true-scenarios
#| tbl-cap: Possible truth tables for $\Longrightarrow$ in a 2-valued propositional framework  

true_table_scenarios <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\land$` = c("$T$", "$F$", "$F$", "$F$"),
 `$\\iff$` = c("$T$", "$F$", "$F$", "$T$"),
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$\\Longrightarrow$` = c("$T$", "$F$", "$T$", "$T$"),
 .name_repair = "minimal"
)

kbl(true_table_scenarios, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:6, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

In @tbl-true-scenarios the first truth table corresponds to $\land$, the second corresponds to $\iff$ and the third corresponds to $\beta$ where these tables are not suitable for $\Longrightarrow$. Therefore the last table is the only truth table suitable for $\Longrightarrow$ assuming we want the both conditions pointed above in a 2-valued propositional framework.

::: {#prp-truth-values-atomic-formulas}
## Truth values of atomic formulas

Suppose $\delta$ is any formula and $u$ and $v$ are truth assignments such that $u(A_n) = v(A_n)$ for all atomic formulas $A_n$ which occur in $\delta$. Then $u(\delta) = v(\delta)$.
:::

::: proof
By strong induction on $n$, the number of connectives (occurrences of $\neg$ or $\Longrightarrow$) in a formula $\delta$ of $\mathcal{L}_P$

*Base step* $(n = 0)$: If $\delta$ is a formula of $\mathcal{L}_P$ with no connectives by @def-formulas-lp is an atomic formula. So $\delta = A_i$ for some $i \in \mathbb{N}$ where $u(A_i) = v(A_i)$. Therefore $u(\delta) = v(\delta)$.

*Induction hypothesis* $(n \leq k)$: Assume that for a formula $\delta$ with $n \leq k$ connectives we have that for $u$ and $v$ truth assignments such that $u(A_n) = v(A_n)$ for all atomic formulates $A_n$ which occur in the $\delta$ we have that $u(\delta) = v(\delta)$

*Induction step* $(n = k + 1)$: Suppose $\varphi$ is a formula with $n = k + 1$ connectives. From @def-formulas-lp $\varphi$ must be either:

-   $(\neg \delta)$ for some formula $\delta$ with $k$ connectives.

    -   Therefore $v(\delta) = u(\delta)$ and by @def-truth-assignment $v(\neg \delta) = u( \neg \delta)$ which means that $v(\varphi) = u(\varphi)$.

-   $(\delta \Longrightarrow \beta)$ for some formulas $\delta$ and $\beta$ with $k$ connectives.

    -   Therefore $v(\delta) = u(\delta)$ and $v(\beta) = u(\beta)$ and by @def-truth-assignment $v(\delta \Longrightarrow \delta) = u(\delta \Longrightarrow \delta)$ which means that $v(\varphi) = u(\varphi)$.
:::

::: {#cor-truth-values-atomic-formulas}
## Truth values of atomic formulas

Suppose $u$ and $v$ are truth assignments such that $u(A_n) = v(A_n)$ for every atomic formula $A_n$. Then $u = v$, i.e. $u(\varphi) = v(\varphi)$ for every formula $\varphi$.
:::

::: proof
Because $u(A_n) = v(A_n)$ for every atomic formula $A_n$ in $\mathcal{L}_p$ we can take any formula $\varphi$ and apply @prp-truth-values-atomic-formulas. Thefefore $v(\varphi) = u(\varphi)$ but $\varphi$ is any formula in $\mathcal{L}_p$ so it applies to every formula.
:::

::: {#def-formula-satisfiable}
If $v$ is a truth assignment and $\varphi$ is a formula, we will often say that $v$ *satisfies* $\varphi$ if $v(\varphi) = T$.

Similarly, if $\Sigma$ is a set of formulas, we will often say that $v$ *satisfies* $\Sigma$ if $v(\sigma) = T$ for every $\sigma \in \Sigma$.

We will say that $\varphi$ (respectively, $\Sigma$) is *satisfiable* if there is some truth assignment which satisfies it.
:::

::: {#def-tautology-contradiction}
A formula $\varphi$ is a *tautology* if it is satisfied by every truth assignment.

A formula $\psi$ is a *contradiction* if there is no truth assignment which satisfies it.
:::

For example, $(A_4 \Longrightarrow A_4)$ is a tautology, $(\neg (A_4 \Longrightarrow A_4))$ is a contradiction and $A_4$ neither of them.

```{r}
#| results: asis
#| label: tbl-example-tautology-contradiction
#| tbl-cap: Example of a tautology and a contradiction

tautology_contradiction <- tibble(
 `$A_4$` = c("$T$", "$F$"), 
 `$(A_4 \\Longrightarrow A_4)$` = c("$T$", "$T$"),
 `$(\\neg (A_4 \\Longrightarrow A_4))$` = c("$F$", "$F$")
)

kbl(tautology_contradiction, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:3, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

::: {#prp-tautology-contradiction-example}
If $\alpha$ is any formula, then $((\neg \alpha) \lor \alpha)$ is a tautology and $((\neg \alpha) \land \alpha)$ is a contradiction.
:::

::: proof
```{r}
#| results: asis

tautology_contradiction_proof <- tibble(
 `$\\alpha$` = c("$T$", "$F$"), 
 `$(\\neg \\alpha)$` = c("$F$", "$T$"),
 `$((\\neg \\alpha) \\lor \\alpha)$` = c("$T$", "$T$"),
 `$((\\neg \\alpha) \\land \\alpha)$` = c("$F$", "$F$")
)

kbl(tautology_contradiction_proof, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```
:::

::: {#prp-relation-tautology-contradiction}
A formula $\beta$ is a tautology if and only if $\neg \beta$ is a contradiction.
:::

::: proof
For all $v$, where $v$ is a true assignment, $v(\beta) = T$. By @def-truth-assignment $v((\neg \beta)) = F$ so $(\neg \beta)$ is a contradiction.

For all $v$, where $v$ is a true assignment, $v((\neg \beta)) = F$. By @def-truth-assignment $v(\beta) = T$ so $\beta$ is a tautology.
:::

::: {#def-formula-or-formulas-implies-a-formula}
A set of formulas $\Sigma$ implies a formula $\varphi$, written as $\Sigma \models \varphi$, if every truth assignment $v$ which satisfies $\Sigma$ also satisfies $\varphi$.

We will often write $\Sigma \not \models \varphi$ if it is not the case that $\Sigma \models \varphi$.

In the case where $\Sigma$ is empty, we will usually write $\models \varphi$ instead of $\emptyset \models \varphi$.

Similarly, if $\Delta$ and $\Gamma$ are sets of formulas, then $\Delta$ implies $\Gamma$, written as $\Delta \models \Gamma$, if every truth assignment $v$ which satisfies $\Delta$ also satisfies $\Gamma$.
:::

For example, $\{ A_3, (A_3 \Longrightarrow (\neg A_7)) \} \models (\neg A_7)$ because if $v$ is a true assignment such that $v(A_3) = T$ and $v((A_3 \Longrightarrow (\neg A_7))) = T$ then it must be the case that $v((\neg A_7)) = T$ by @def-truth-assignment.

Also, $\{ A_8, (A_5 \Longrightarrow A_8) \} \not \models A_5$, because if $u$ is a true assignment such that $u(A_8) = T$ and $u((A_5 \Longrightarrow A_8)) = T$. However, it is possible to have $u(A_5) = F$.

::: {#rem-contradiction-tautology-empty-set}
A formula $\varphi$ is a tautology if and only if $\models \varphi$.

A formula $\varphi$ is a contradiction if and only if $\models (\neg \varphi)$.
:::

Lets brake each element to understand why @rem-contradiction-tautology-empty-set is true:

-   If $v$ is a truth assignment then:

    -   $v$ satisfies $\sigma \iff v(\sigma) = T$

-   If $\Sigma$ is a set of formulas then:

    -   $v$ satisfies $\Sigma \iff (\forall \sigma)(\sigma \in \Sigma \Longrightarrow v(\sigma)=T)$

-   $\Sigma \models \varphi$ if and only if every truth assignment $v$ which satisfies $\Sigma$ also satisfies $\varphi$

    -   $\Sigma \models \varphi \iff ((\forall v)((\forall \sigma)(\sigma \in \Sigma \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$

-   Now let's apply to $\models \varphi$ when $\varphi$ is a tautology:

    -   $\models \varphi \iff ((\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$

        -   $\sigma \in \emptyset$ is false so $(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)$ is true by @def-truth-assignment.

        -   $(\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T))$ will be true and $v(\sigma)=T$ is true because $\sigma$ is a tautology

        -   By @def-truth-assignment $((\forall v)((\forall \sigma)(\sigma \in \emptyset \Longrightarrow v(\sigma)=T)) \Longrightarrow v(\varphi)=T)$ is true so we can write $\models \varphi$.

::: {#prp-subset-formulas-implies}
If $\Gamma$ and $\Sigma$ are sets of formulas such that $\Gamma \subseteq \Sigma$, then $\Sigma \models \Gamma$.
:::

::: proof
If $v$ satisfies $\Sigma$ then for all $\sigma \in \Sigma$ we have that $v(\sigma) = T$. But if $\gamma \in \Gamma$ then also $\gamma \in \Sigma$. Therefore $v(\gamma) = T$ for any formula that belongs to $\Gamma$. This means that $\Sigma \models \Gamma$.
:::

::: {#exr-check-a-formulas-implies-a-formula}
How can one check whether or not $\Sigma \models \varphi$ for a formula $\varphi$ and a finite set of formulas $\Sigma$?
:::

::: {#sol-check-a-formulas-implies-a-formula}
We can construct a truth table and evaluate if in each row where the formulas that belongs to $\Sigma$ are true $\varphi$ is also true.

For example, let $\Sigma = \{ (\alpha \Longrightarrow \beta), (\neg \beta) \}$ and $\varphi = (\neg \alpha)$. The truth table will be:

```{r}
#| results: asis

exercise_1_8 <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(\\alpha \\Longrightarrow \\beta)$` = c("$T$", "$F$", "$T$", "$T$"),
 `$(\\neg \\beta)$` = c("$F$", "$T$", "$F$", "$T$"),
 `$(\\neg \\alpha)$` = c("$F$", "$F$", "$T$", "$T$")
)

kbl(exercise_1_8, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

The last row of the truth table represents a truth assignment $v$ that satisfies $\Sigma$ and also the same truth asignment $v$ satisfies $\varphi$. Therefore we can check that $\Sigma \models \varphi$.

It is importa to mention that $\Sigma$ must be a finite set of formulas or it will not be possible to check each row in the truth table that is build.
:::

::: {#prp-line}
Suppose $\Sigma$ is a set of formulas and $\psi$ and $\rho$ are formulas. Then $\Sigma \cup \{ \psi \} \models \rho$ if and only if $\Sigma \models (\psi \Longrightarrow \rho)$.
:::

::: proof
-   Assume $\Sigma \models (\psi \Longrightarrow \rho)$ and let $v$ satisfies $\Sigma \cup \{ \psi \}$.

    -   By @prp-subset-formulas-implies $v$ satisfies also $\Sigma$ because $\Sigma \subseteq \Sigma \cup \{ \psi \}$.

    -   By assumption $v$ satisfies $(\psi \Longrightarrow \rho)$ because $\Sigma \models (\psi \Longrightarrow \rho)$. Therefore $v((\psi \Longrightarrow \rho)) = T$

    -   Because $v(\psi) = T$ and $v((\psi \Longrightarrow \rho)) = T$ by @def-truth-assignment it must be the case that $v(\rho) = T$. Therefore $\Sigma \cup \{ \psi \} \models \rho$.

-   Assume $\Sigma \cup \{ \psi \} \models \rho$.

    -   Let $v$ satisfies $\Sigma \cup \{ \psi \}$ so $v(\sigma) = F$ for all $\sigma in \Sigma$, $v(\psi) = T$ and $v(\rho) = T$.

    -   Because $v(\psi) = T$ and $v(\rho) = T$ by @def-truth-assignment $v((\psi \Longrightarrow \rho)) = T$.

    -   Therefore $\Sigma \models (\psi \Longrightarrow \rho)$.
:::

::: {#prp-set-formulas-satisfiable}
A set of formulas $\Sigma$ is satisfiable if and only if there is no contradiction $\chi$ such that $\Sigma \models \chi$.
:::

::: proof
-   Assume $\Sigma = \emptyset$ then by @rem-contradiction-tautology-empty-set $\emptyset$ is satisfiable and $\chi$ will be a tautology because $\models \chi$.

-   Assume $\Sigma \neq \emptyset$ is a set of formulas that are satisfiable.

    -   Lets take $\sigma \in \Sigma$ so $v(T) = \sigma$. Then $\Sigma \models \sigma$ where $\sigma$ is not a contradiction.

-   Assume $\Sigma \models \chi$ where $\chi$ is not a contradiction.

    -   Then for all $\sigma \in Sigma$ we have that $v(\sigma) = T$. Therefore $\Sigma$ is satisfiable.
:::

### Deductions

::: {#def-axioms-lp}
The 3 axiom schema of $\mathcal{L}_P$ are:

1.  $(\alpha \Longrightarrow (\beta \Longrightarrow \alpha))$

2.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$

3.  $(((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta))$

Replacing $\alpha$, $\beta$, and $\gamma$ by particular formulas of $\mathcal{L}_P$ in any one of the axiom schemas gives an axiom of $\mathcal{L}_P$.
:::

::: {#prp-axioms-lp-tautology}
Every axiom of $\mathcal{L}_P$ is a tautology.
:::

::: proof
```{r}
#| results: asis
#| label: tbl-axiom-1-lp
#| tbl-cap: Truth table axiom 1 $\mathcal{L}_p$

axiom_1_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(\\beta \\Longrightarrow \\alpha)$` = c("$T$", "$T$", "$F$", "$T$"),
 `$\\alpha \\Longrightarrow ((\\beta \\Longrightarrow \\alpha))$` = c("$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_1_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-axiom-2-lp
#| tbl-cap: Truth table axiom 2 $\mathcal{L}_p$

axiom_2_a_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$T$", "$T$", "$F$", "$F$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$T$", "$F$", "$F$", "$T$", "$T$", "$F$", "$F$"),
 `$\\gamma$` = c("$T$", "$F$", "$T$", "$F$", "$T$", "$F$", "$T$", "$F$"),
 `$(\\alpha \\Longrightarrow (\\beta \\Longrightarrow \\gamma))$` = c("$T$", "$F$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$"),
 `$((\\alpha \\Longrightarrow \\beta) \\Longrightarrow (\\alpha \\Longrightarrow \\gamma))$` = c("$T$", "$F$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_2_a_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:5, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
 
axiom_2_b_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$T$", "$T$", "$F$", "$F$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$T$", "$F$", "$F$", "$T$", "$T$", "$F$", "$F$"),
 `$\\gamma$` = c("$T$", "$F$", "$T$", "$F$", "$T$", "$F$", "$T$", "$F$"),
 `$((\\alpha \\Longrightarrow (\\beta \\Longrightarrow \\gamma))) \\Longrightarrow \\\\ ((\\alpha \\Longrightarrow \\beta) \\Longrightarrow (\\alpha \\Longrightarrow \\gamma))$` = c("$T$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_2_b_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```

```{r}
#| results: asis
#| label: tbl-axiom-3-lp
#| tbl-cap: Truth table axiom 3 $\mathcal{L}_p$

axiom_3_a_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$((\\neg \\beta) \\Longrightarrow (\\neg \\alpha))$` = c("$T$", "$F$", "$T$", "$T$"),
 `$(((\\neg \\beta) \\Longrightarrow \\alpha) \\Longrightarrow \\beta)$` = c("$T$", "$F$", "$T$", "$T$")
)

kbl(axiom_3_a_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:4, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
 
axiom_3_b_lp <- tibble(
 `$\\alpha$` = c("$T$", "$T$", "$F$", "$F$"), 
 `$\\beta$` = c("$T$", "$F$", "$T$", "$F$"),
 `$(((\\neg \\beta) \\Longrightarrow (\\neg \\alpha)) \\Longrightarrow (((\\neg \\beta) \\Longrightarrow \\alpha) \\Longrightarrow \\beta))$` = c("$T$", "$T$", "$T$", "$T$")
)

kbl(axiom_3_b_lp, escape = FALSE) |>
 kable_styling() |> 
 column_spec(column = 1:3, border_right = TRUE) |> 
 row_spec(row = 0, extra_css = "border-right: 1px solid;") |> 
 cat()
```
:::

::: {#def-modus-ponens}
## Modus ponens (rule of inference)

Given the formulas $\varphi$ and $(\varphi \Longrightarrow \psi)$, one may infer $\psi$.
:::

::: {#prp-modus-ponens-implies}
Suppose $\varphi$ and $\psi$ are formulas. Then $\{ \varphi, (\varphi \Longrightarrow \psi) \} \models \psi$.
:::

::: proof
Becuase $v(\varphi) = T$ and $v((\varphi \Longrightarrow \psi)) = T$ by @def-truth-assignment it must be the case that $v(\psi) = T$. Therefore $\{ \varphi, (\varphi \Longrightarrow \psi) \} \models \psi$.
:::

::: {#def-deduction-or-proof}
## Deduction or proof

Let $\Sigma$ be a set of formulas. A deduction or proof from $\Sigma$ in $\mathcal{L}_P$ is a finite sequence $\varphi_1 \varphi_2 \ldots \varphi_n$ of formulas such that for each $k \leq n$:

1.  $\varphi_k$ is an axiom
2.  $\varphi_k \in \Sigma$
3.  There are $i, j < k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

A formula of $\Sigma$ appearing in the deduction is called a *premiss*.

$\Sigma$ proves a formula $\alpha$, written as $\Sigma \vdash \alpha$, if $\alpha$ is the last formula of a deduction from $\Sigma$.

We will usually write $\vdash \alpha$ for $\emptyset \vdash \alpha$

We will take $\Sigma \vdash \Delta$ to mean that $\Sigma \vdash \delta$ for every formula $\delta \in \Delta$.
:::

::: {#exm-example-proof-1}
Show that $\vdash (\varphi \Longrightarrow \varphi)$

1.  $((\varphi \Longrightarrow ((\varphi \Longrightarrow \varphi) \Longrightarrow \varphi)) \Longrightarrow ((\varphi \Longrightarrow (\varphi \Longrightarrow \varphi)) \Longrightarrow (\varphi \Longrightarrow \varphi)))$ Axiom 2

2.  $(\varphi \Longrightarrow ((\varphi \Longrightarrow \varphi) \Longrightarrow \varphi))$ Axiom 1

3.  $((\varphi \Longrightarrow (\varphi \Longrightarrow \varphi)) \Longrightarrow (\varphi \Longrightarrow \varphi))$ Modus ponens 1, 2

4.  $(\varphi \Longrightarrow (\varphi \Longrightarrow \varphi))$ Axiom 1

5.  $(\varphi \Longrightarrow \varphi)$ Modus ponens 3, 4
:::

::: {#exm-example-proof-2}
Show that $\{ (\alpha \Longrightarrow \beta), (\beta \Longrightarrow \gamma) \} \vdash (\alpha \Longrightarrow \gamma)$

1.  $((\beta \Longrightarrow \gamma) \Longrightarrow (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)))$ Axiom 1

2.  $(\beta \Longrightarrow \gamma)$ Premiss

3.  $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ Modus ponens 1, 2

4.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$ Axiom 2

5.  $((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma))$ Modus ponens 4, 3

6.  $(\alpha \Longrightarrow \beta)$ Premiss

7.  $(\alpha \Longrightarrow \gamma)$ Modus ponens 5, 6
:::

::: {#exm-example-proof-3}
Show that $\vdash (((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha)$

1.  $(((\neg \alpha) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha))$ Axiom 3

2.  $((\neg \alpha) \Longrightarrow (\neg \alpha))$ @exm-example-proof-1

3.  $(((\neg \alpha) \Longrightarrow \alpha) \Longrightarrow \alpha)$ Modus ponens 1, 2
:::

::: {#exr-exercise-proof-1}
Show that if $\alpha$, $\beta$, and $\gamma$ are formulas, then:

-   $\{ (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)), \beta \} \vdash (\alpha \Longrightarrow \gamma)$

-   $\vdash (\alpha \lor (\neg \alpha))$
:::

::: {#sol-exercise-proof-1}
In the case of $\{ (\alpha \Longrightarrow (\beta \Longrightarrow \gamma)), \beta \} \vdash (\alpha \Longrightarrow \gamma)$

1.  $((\alpha \Longrightarrow (\beta \Longrightarrow \gamma)) \Longrightarrow ((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma)))$ Axiom 2

2.  $(\alpha \Longrightarrow (\beta \Longrightarrow \gamma))$ Premiss

3.  $((\alpha \Longrightarrow \beta) \Longrightarrow (\alpha \Longrightarrow \gamma))$ Modus ponens 1, 2

4.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1

5.  $\beta$ Premiss

6.  $(\alpha \Longrightarrow \beta)$ Modus ponens 4, 5

7.  $(\alpha \Longrightarrow \gamma)$ Modus ponens 3, 6

In the case of $\vdash (\alpha \lor (\neg \alpha))$ by @sec-informal-conventions is it equivalent to $\vdash ((\neg \alpha) \Longrightarrow (\neg \alpha))$

1.  $((\neg \alpha) \Longrightarrow (\neg \alpha))$ @exm-example-proof-1
:::

::: {#exm-example-proof-4}
Let us show that $\vdash ((\neg (\neg \beta)) \Longrightarrow \beta)$

1.  $(((\neg \beta) \Longrightarrow (\neg (\neg \beta))) \Longrightarrow (((\neg \beta) \Longrightarrow (\neg \beta)) \Longrightarrow \beta))$ Axiom 3

2.  $((\neg (\neg \beta)) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg (\neg \beta))))$ Axiom 1

3.  $((\neg (\neg \beta)) \Longrightarrow (((\neg \beta) \Longrightarrow (\neg \beta)) \Longrightarrow \beta))$ @exm-example-proof-2 2, 1

4.  $((\neg \beta) \Longrightarrow (\neg \beta))$ @exm-example-proof-1

5.  $((\neg (\neg \beta)) \Longrightarrow \beta)$ @exr-exercise-proof-1 3, 4
:::

::: {#prp-sub-deduction}
If $\varphi_1 \varphi_2 \ldots \varphi_n$ is a deduction of $\mathcal{L}_P$, then $\varphi_1 \ldots \varphi_{\ell}$ is also a deduction of $\mathcal{L}_P$ for any $\ell$ such that $1 \leq \ell \leq n$.
:::

::: proof
Because $\varphi_1 \varphi_2 \ldots \varphi_n$ is a deduction of $\mathcal{L}_P$ then by @def-deduction-or-proof $\varphi_m$ for $1 \leq m \leq \ell n$ is an axiom, it belongs to a set of premisses or there are $i, j < m$ such that $\varphi_m$ follows from $\varphi_i$ and $\varphi_i$ by Modus Ponens. Therefore again by @def-deduction-or-proof $\varphi_1 \ldots \varphi_{\ell}$ is a deduction.
:::

::: {#prp-modus-ponens-deduction}
If $\Gamma \vdash \delta$ and $\Gamma \vdash (\delta \Longrightarrow \beta)$, then $\Gamma \vdash \beta$.
:::

::: proof
If $\Gamma \vdash \delta$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that $\varphi_n = \delta$.

Also if $\Gamma \vdash (\delta \Longrightarrow \beta)$ then there is a deduction $\psi_1 \ldots \psi_m$ such that $\psi_m = (\delta \Longrightarrow \beta)$.

Therefore we can build a deduction $\varphi_1 \ldots \varphi_n \psi_1 \ldots \psi_m \psi_{m+1}$ such that $\psi_{m+1} = \beta$ where it follows from $\varphi_n$ and $\psi_m$ by Modus Ponens.

By @def-deduction-or-proof and using $\varphi_1 \ldots \varphi_n \psi_1 \ldots \psi_m \psi_{m+1}$ we have that $\Gamma \vdash \beta$ because for each $k \leq n$ and $s \leq m + 1$:

-   $\varphi_k$ or $\psi_s$ is an axiom
-   $\varphi_k \in \Gamma$ or $\psi_s \in \Gamma$
-   there are $i,j \leq k$ or $i,j \leq s$ such that $\varphi_k$ or $\psi_s$ follows from $\varphi_i$ and $\varphi_j$ or from $\psi_i$ and $\psi_j$ by Modus Ponens.
:::

::: {#prp-subset-formulas-deduction}
If $\Gamma \subseteq \Delta$ and $\Gamma \vdash \alpha$, then $\Delta \vdash \alpha$.
:::

::: proof
Because $\Gamma \vdash \alpha$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that for each $k \leq n$:

-   $\varphi_k$ is an axiom
-   $\varphi_k \in \Gamma$
-   there are $i,j \leq k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Because $\Gamma \subseteq \Delta$ then we also have that:

-   $\varphi_k$ is an axiom
-   $\varphi_k \in \Delta$
-   there are $i,j \leq k$ such that $\varphi_k$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Therefore $\Delta \vdash \alpha$.
:::

::: {#prp-set-formulas-transitivity-deduction}
If $\Gamma \vdash \Delta$ and $\Delta \vdash \sigma$, then $\Gamma \vdash \sigma$.
:::

::: proof
If $\Gamma \vdash \Delta$ then $\Gamma \vdash \delta$ for every formula $\delta \in \Delta$. Therefore there is a deduction $\psi_1 \ldots \psi_m$ such that for each $k \leq m$:

-   $\psi_k$ is an axiom
-   $\psi_k \in \Gamma$
-   there are $i,j \leq k$ such that $\psi_k$ follows from $\psi_i$ and $\psi_j$ by Modus Ponens.

Because $\Gamma \vdash \delta$ for every formula $\delta \in \Delta$ then $\psi_m = \delta$.

Also if $\Delta \vdash \sigma$ then there is a deduction $\varphi_1 \ldots \varphi_n$ such that for each $s \leq n$:

-   $\varphi_s$ is an axiom
-   $\varphi_s \in \Delta$
-   there are $i,j \leq s$ such that $\varphi_s$ follows from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Because $\Delta \vdash \sigma$ then $\varphi_n = \sigma$.

Therefore we can build a deduction $\psi_1 \ldots \psi_m \varphi_1 \ldots \varphi_n$ such that for each $k \leq m$ and $s \leq n$:

-   $\psi_k$ or $\varphi_s$ is an axiom
-   $\psi_k \in \Gamma$ or $\varphi_s \in \Gamma$
-   there are $i,j \leq k$ or $i,j \leq s$ such that $\psi_k$ or $\varphi_s$ follows from $\psi_i$ and $\psi_j$ or from $\varphi_i$ and $\varphi_j$ by Modus Ponens.

Therefore $\Gamma \vdash \sigma$.
:::

::: {#thm-deduction-theorem}
## Deduction Theorem

If $\Sigma$ is any set of formulas and $\alpha$ and $\beta$ are any formulas, then $\Sigma \vdash (\alpha \Longrightarrow \beta)$ if and only if $\Sigma \cup \{ \alpha \} \vdash \beta$.
:::

::: proof
-   Assume $\Sigma \vdash (\alpha \Longrightarrow \beta)$

    -   If $\Sigma \cup \{ \alpha \}$ then because $\alpha$ is a premiss we have that $\Sigma \cup \{ \alpha \} \vdash \alpha$

    -   Also because $\Sigma \subseteq \Sigma \cup \{ \alpha \}$ and $Σ \vdash (\alpha \Longrightarrow \beta)$ by @prp-subset-formulas-deduction $\Sigma \cup \{ \alpha \} \vdash (\alpha \Longrightarrow \beta)$

    -   Finally, because $\Sigma \cup \{ \alpha \} \vdash \alpha$ and $\Sigma \cup \{ \alpha \} \vdash (\alpha \Longrightarrow \beta)$ by @prp-modus-ponens-deduction $\Sigma \cup \{ \alpha \} \vdash \beta$

-   Assume $\Sigma \cup \{ \alpha \} \vdash \beta$

    -   By strong induction on $n$, the length of deduction or proof of $\beta$ from $\Sigma \cup \{ \alpha \}$

        -   *Base step* $(n = 1)$: Then $\beta$ is an axiom or $\beta \in \Sigma \cup \{ \alpha \}$

            -   If $\beta$ is an axiom then we can proof $(\alpha \Longrightarrow \beta)$ from $\Sigma$ in the following way:

                1.  $\beta$ Axiom 1, 2 or 3
                2.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1
                3.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 2, 1

            -   If $\beta \in \Sigma$ then:

                1.  $\beta$ Premiss
                2.  $(\beta \Longrightarrow (\alpha \Longrightarrow \beta))$ Axiom 1
                3.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 2, 1

            -   If $\beta = \alpha$ then $(\alpha \Longrightarrow \beta) = (\alpha \Longrightarrow \alpha)$ and we can use @exm-example-proof-1.

        -   *Induction hypothesis* $(n \leq k)$: Assume that if there is a deduction or proof of length $n \leq k$ of $\beta$ from $\Sigma \cup \{ \alpha \}$ then $\Sigma \vdash (\alpha \Longrightarrow \beta)$.

        -   *Induction step* $(n = k + 1)$: Suppose there is a deduction or proof of length $n = k + 1$ of $\beta$ from $\Sigma \cup \{ \alpha \}$.

            -   Therefore there are 3 possibilities by @def-deduction-or-proof: $\beta$ is an axiom, $\beta \in \Sigma \cup \{ \alpha \}$ or there are $i,j \leq k + 1$ such that $\beta$ follows from $\psi_i$ and $\psi_j$.

                -   The first 2 possibilities are cover in the *Base step* where we can show in a similar way that $\Sigma \vdash (\alpha \Longrightarrow \beta)$.

                -   In the case of the last possibility and without loss of generality $\psi_i = (\psi_j \Longrightarrow \beta)$. Furthermore, $\Sigma \cup \{ \alpha \} \vdash \psi_i$ and $\Sigma \cup \{ \alpha \} \vdash \psi_j$ where are deductions of length $n \leq k$.

                    -   By the *Induction hypothesis* $\Sigma \vdash (\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$ and $\Sigma \vdash (\alpha \Longrightarrow \psi_j)$. Therefore:

                        1.  $(\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$ because $\Sigma \vdash (\alpha \Longrightarrow (\psi_j \Longrightarrow \beta))$

                        2.  $(\alpha \Longrightarrow \psi_j)$ because $\Sigma \vdash (\alpha \Longrightarrow \psi_j)$

                        3.  $((\alpha \Longrightarrow (\psi_j \Longrightarrow \beta)) \Longrightarrow ((\alpha \Longrightarrow \psi_j) \Longrightarrow (\alpha \Longrightarrow \beta)))$ Axiom 2

                        4.  $((\alpha \Longrightarrow \psi_j) \Longrightarrow (\alpha \Longrightarrow \beta))$ Modus Ponens 3, 1

                        5.  $(\alpha \Longrightarrow \beta)$ Modus Ponens 4, 2

                -   In any case we have that $\Sigma \vdash (\alpha \Longrightarrow \beta)$.
:::

::: {#exm-deduction-theorem-example-1}
Show that $\vdash (\psi \Longrightarrow \psi)$. Using @thm-deduction-theorem this is equivalent to $\emptyset \cup \{ \psi \} \vdash \psi$. Therefore:

1.  $\psi$ Premiss

Compare it to @exm-example-proof-1.
:::

::: {#exr-application-deduction-theorem}
Show that:

1.  $\{ \delta, (\neg \delta) \} \vdash \gamma$
2.  $\vdash (\psi \Longrightarrow (\neg (\neg \psi)))$
3.  $\vdash (((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow \beta))$
4.  $\vdash ((\alpha \Longrightarrow \beta) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg \alpha)))$
5.  $\vdash ((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$
6.  $\vdash (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow ((\neg \alpha) \Longrightarrow \beta))$
7.  $\vdash (\sigma \Longrightarrow (\sigma \lor \tau))$
8.  $\{ (\alpha \land \beta) \} \vdash \beta$
9.  $\{ (\alpha \land \beta) \} \vdash \alpha$
:::

::: {#sol-application-deduction-theorem}
-   $\{ \delta, (\neg \delta) \} \vdash \gamma$

    1.  $(((\neg \gamma) \Longrightarrow (\neg \delta)) \Longrightarrow (((\neg \gamma) \Longrightarrow \delta) \Longrightarrow \gamma))$ Axiom 3

    2.  $((\neg \delta) \Longrightarrow ((\neg \gamma) \Longrightarrow (\neg \delta)))$ Axiom 1

    3.  $(\neg \delta)$ Premiss

    4.  $(((\neg \gamma) \Longrightarrow \delta) \Longrightarrow \gamma)$ Modus Ponens 2, 3

    5.  $(\delta \Longrightarrow ((\neg \gamma) \Longrightarrow \delta))$ Axiom 1

    6.  $\delta$ Premiss

    7.  $((\neg \gamma) \Longrightarrow \delta)$ Modus Ponens 5, 6

    8.  $\gamma$ Modus Ponens 4, 7

-   $\vdash (\psi \Longrightarrow (\neg (\neg \psi)))$

    1.  $(((\neg (\neg (\neg \psi))) \Longrightarrow (\neg \psi)) \Longrightarrow (((\neg (\neg (\neg \psi))) \Longrightarrow \psi) \Longrightarrow (\neg (\neg \psi))))$ Axiom 3

    2.  $((\neg (\neg (\neg \psi))) \Longrightarrow (\neg \psi))$ @exm-example-proof-4

    3.  $(((\neg (\neg (\neg \psi))) \Longrightarrow \psi) \Longrightarrow (\neg (\neg \psi)))$ Modus Ponens 1, 2

    4.  $(\psi \Longrightarrow ((\neg (\neg (\neg \psi))) \Longrightarrow \psi))$ Axiom 1

    5.  $(\psi \Longrightarrow (\neg (\neg \psi)))$ @exm-example-proof-2 4, 3

-   By @thm-deduction-theorem $\vdash (((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow \beta))$ is equivalent to $\{ ((\neg \beta) \Longrightarrow (\neg \alpha)) \} \vdash (\alpha \Longrightarrow \beta)$

    1.  $(((\neg \beta) \Longrightarrow (\neg \alpha)) \Longrightarrow (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta))$ Axiom 3

    2.  $((\neg \beta) \Longrightarrow (\neg \alpha))$ Premiss

    3.  $(((\neg \beta) \Longrightarrow \alpha) \Longrightarrow \beta)$ Modus Ponens 1, 2

    4.  $(\alpha \Longrightarrow ((\neg \beta) \Longrightarrow \alpha))$ Axiom 1

    5.  $(\alpha \Longrightarrow \beta)$ @exm-example-proof-2 4, 3

-   By @thm-deduction-theorem $\vdash ((\alpha \Longrightarrow \beta) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg \alpha)))$ it is equivalent to $\{ (\alpha \Longrightarrow \beta) \} \vdash ((\neg \beta) \Longrightarrow (\neg \alpha))$

    1.  $(((\neg (\neg \alpha)) \Longrightarrow (\neg(\neg \beta))) \Longrightarrow (((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)) \Longrightarrow (\neg \alpha)))$ Axiom 1

    2.  $(\alpha \Longrightarrow \beta)$ Premiss

    3.  $(\beta \Longrightarrow (\neg (\neg \beta)))$ @exr-application-deduction-theorem 2

    4.  $(\alpha \Longrightarrow (\neg (\neg \beta)))$ @exm-example-proof-2 2, 3

    5.  $((\neg (\neg \alpha)) \Longrightarrow \alpha)$ @exm-example-proof-4

    6.  $((\neg (\neg \alpha)) \Longrightarrow (\neg (\neg \beta)))$ @exm-example-proof-2 5, 4

    7.  $(((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)) \Longrightarrow (\neg \alpha))$ Modus Ponens 1, 6

    8.  $((\neg \beta) \Longrightarrow ((\neg (\neg \alpha)) \Longrightarrow (\neg \beta)))$ Axiom 1

    9.  $((\neg \beta) \Longrightarrow (\neg \alpha))$ @exm-example-proof-2 8, 7

-   By @thm-deduction-theorem $\vdash ((\beta \Longrightarrow (\neg \alpha)) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ is equivalent to $\{ (\beta \Longrightarrow (\neg \alpha)) \} \vdash (\alpha \Longrightarrow (\neg \beta))$

    1.  $(\beta \Longrightarrow (\neg \alpha))$ Premiss

    2.  $((\neg (\neg \alpha)) \Longrightarrow (\neg \beta))$ @exr-application-deduction-theorem 4 applied to 1

    3.  $(\alpha \Longrightarrow (\neg (\neg \alpha)))$ @exr-application-deduction-theorem 2

    4.  $(\alpha \Longrightarrow (\neg \beta))$ @exm-example-proof-2 3, 2

-   By @thm-deduction-theorem $\vdash (((\neg \beta) \Longrightarrow \alpha) \Longrightarrow ((\neg \alpha) \Longrightarrow \beta))$ is equivalent to $\{ ((\neg \beta) \Longrightarrow \alpha) \} \vdash ((\neg \alpha) \Longrightarrow \beta)$

    1.  $((\neg \beta) \Longrightarrow \alpha)$ Premiss

    2.  $((\neg \alpha) \Longrightarrow (\neg (\neg \beta)))$ @exr-application-deduction-theorem 4 applied to 1

    3.  $((\neg (\neg \beta)) \Longrightarrow \beta)$ @exm-example-proof-4

    4.  $((\neg \alpha) \Longrightarrow \beta)$ @exm-example-proof-2 2, 3

-   By @sec-informal-conventions $\vdash (\sigma \Longrightarrow (\sigma \lor \tau))$ is equivalent to $\vdash (\sigma \Longrightarrow ((\neg \sigma) \Longrightarrow \tau))$. Also applying 2 times @thm-deduction-theorem $\vdash (\sigma \Longrightarrow ((\neg \sigma) \Longrightarrow \tau))$ is equivalent to $\{ \sigma, (\neg \sigma) \} \vdash \tau$

    1.  $\tau$ @exr-application-deduction-theorem 1

-   By @sec-informal-conventions $\{ (\alpha \land \beta) \} \vdash \beta$ is equivalent to $\{ (\neg (\alpha \Longrightarrow (\neg \beta))) \} \vdash \beta$.

    1.  $(((\neg \beta) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))) \Longrightarrow (((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta))$ Axiom 3

    2.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow ((\neg \beta) \Longrightarrow (\neg (\alpha \Longrightarrow (\neg \beta)))))$ Axiom 1

    3.  $((\neg (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow (((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta))$ @exm-example-proof-2 2, 1

    4.  $(\neg (\alpha \Longrightarrow (\neg \beta)))$ Premiss

    5.  $(((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta))) \Longrightarrow \beta)$ Modus ponens 3, 4

    6.  $((\neg \beta) \Longrightarrow (\alpha \Longrightarrow (\neg \beta)))$ Axiom 1

    7.  $\beta$ Modus Ponens 5, 6
    
-  
:::
